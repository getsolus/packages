From e4782c53cf18d759a1d5f51961e7bbe0611c390f Mon Sep 17 00:00:00 2001
From: Reilly Brogan <reilly@reillybrogan.com>
Date: Mon, 13 Nov 2023 22:45:50 -0600
Subject: [PATCH] Use libxcrypt for salt generation

Many distros have already completed their migration to yescrypt for password hashes. For these distros it is desirable that the user KCM follows suit and generates yescrypt hashes for accountsservice by default.

The easiest way to handle this is to check to see if we're building with at least libxcrypt 4. This version is guaranteed to have the `crypt_gensalt` symbol which will typically default to yescrypt on those distros. The `crypt` function will detect that we're passing in a yescrypt prefix and generate the correct hash. This is functionally identical to how DEs that use libaccountsservice work.
---
 CMakeLists.txt          |  6 ++++++
 config-unix.h.cmake     |  2 ++
 kcms/users/src/user.cpp | 11 +++++++++++
 3 files changed, 19 insertions(+)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index e8109c715..974ea352a 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -159,6 +159,12 @@ if(PipeWire_FOUND)
   find_package(Libdrm REQUIRED)
 endif()
 
+pkg_check_modules(libxcrypt libxcrypt>=4)
+add_feature_info(libxcrypt libxcrypt_FOUND "Required for yescrypt hashes")
+if(${libxcrypt_FOUND})
+    set(HAVE_CRYPT_GENSALT true)
+endif()
+
 if(QT_MAJOR_VERSION EQUAL "5")
   find_package(QtWaylandScanner REQUIRED)
   find_package(Qt5XkbCommonSupport)
diff --git a/config-unix.h.cmake b/config-unix.h.cmake
index d1d31812b..9eabc7be1 100644
--- a/config-unix.h.cmake
+++ b/config-unix.h.cmake
@@ -1,3 +1,5 @@
 
 /* Define to 1 if you have the <limits.h> header file. */
 #cmakedefine HAVE_LIMITS_H 1
+
+#cmakedefine01 HAVE_CRYPT_GENSALT
diff --git a/kcms/users/src/user.cpp b/kcms/users/src/user.cpp
index 7949607fa..2912edc61 100644
--- a/kcms/users/src/user.cpp
+++ b/kcms/users/src/user.cpp
@@ -6,6 +6,7 @@
     SPDX-License-Identifier: LGPL-2.1-only OR LGPL-3.0-only OR LicenseRef-KDE-Accepted-LGPL
 */
 
+#include <config-unix.h> // HAVE_CRYPT_GENSALT
 #include "user.h"
 #include "kcmusers_debug.h"
 #include "user_interface.h"
@@ -16,6 +17,10 @@
 #include <sys/types.h>
 #include <unistd.h>
 
+#ifdef HAVE_CRYPT_GENSALT
+#include <crypt.h>
+#endif
+
 User::User(QObject *parent)
     : QObject(parent)
 {
@@ -196,6 +201,7 @@ void User::loadData()
     }
 }
 
+#ifndef HAVE_CRYPT_GENSALT
 static char saltCharacter()
 {
     static constexpr const quint32 letterCount = 64;
@@ -210,9 +216,11 @@ static char saltCharacter()
 
     return saltCharacters[index];
 }
+#endif
 
 static QString saltPassword(const QString &plain)
 {
+#ifndef HAVE_CRYPT_GENSALT
     QString salt;
 
     salt.append("$6$");
@@ -222,6 +230,9 @@ static QString saltPassword(const QString &plain)
     }
 
     salt.append("$");
+#else
+    QString salt = crypt_gensalt (NULL, 0, NULL, 0);
+#endif
 
     auto stdStrPlain = plain.toStdString();
     auto cStrPlain = stdStrPlain.c_str();
-- 
2.42.0

