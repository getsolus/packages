name       : llvm
version    : 16.0.6
release    : 114
source     :
    - https://github.com/llvm/llvm-project/releases/download/llvmorg-16.0.6/llvm-project-16.0.6.src.tar.xz : ce5e71081d17ce9e86d7cbcfa28c4b04b9300f8fb7e78422b1feb6bc52c3028e
homepage   : http://llvm.org/
license    : Apache-2.0-with-LLVM-exception
summary    :
    - Low Level Virtual Machine (Reusable compiler and toolchains)
    - clang : Clang Compiler frontend to LLVM
    - clang-devel : Development files for building clang plugins
    - clang-32bit : 32bit libraries for clang
component  :
    - programming
    - devel : programming.devel
    - clang : programming
    - clang-32bit : emul32
    - clang-32bit-devel : programming.devel
    - clang-devel : programming.devel
debug      : no
emul32     : no
libsplit   : no
clang      : yes
builddeps  :
    - pkgconfig32(libelf)
    - pkgconfig32(libffi)
    - pkgconfig32(libxml-2.0)
    - pkgconfig32(libedit)
    - pkgconfig32(libzstd)
    - pkgconfig32(ncursesw)
    - pkgconfig32(zlib)
    - doxygen
    - glibc-32bit-devel
    - libgcc-32bit
    - libstdc++-32bit
    - llvm-32bit-devel
    - python-recommonmark
    - swig
    - llvm-bolt
rundeps    :
    - devel :
        - zstd-devel
    - clang :
        - llvm-devel
    - clang-devel :
        - llvm-clang
    - clang-32bit-devel :
        - llvm-clang-32bit
        - llvm-clang-devel
description: |
    The LLVM package contains a collection of modular and reusable compiler and toolchain technologies. The Low Level Virtual Machine (LLVM) Core libraries provide a modern source and target-independent optimizer, along with code generation support for many popular CPUs (as well as some less common ones!). These libraries are built around a well specified code representation known as the LLVM intermediate representation ("LLVM IR").
patterns   :
    - 32bit-devel :
        - /usr/bin/llvm-config32
        - /usr/include/llvm/Config/llvm-config-32.h
        - /usr/lib32/cmake/llvm
    - clang-32bit :
        - /usr/lib32/libclang*.so*
        - /usr/lib32/SampleAnalyzerPlugin.so
        - /usr/lib32/CheckerOptionHandlingAnalyzerPlugin.so
        - /usr/lib32/CheckerDependencyHandlingAnalyzerPlugin.so
        - /usr/lib32/liblldb*.so*
        - /usr/lib32/lib*omp*.so*
    - clang-32bit-devel :
        - /usr/lib32/clang
        - /usr/lib32/cmake/clang
        - /usr/lib32/libclang*.a
        - /usr/lib32/liblldb*.a
    - clang-devel :
        - /usr/include/clang*
        - /usr/include/lld*
        - /usr/include/openmp*
        - /usr/lib64/libclang*.a
    - clang :
        - /usr/bin
        - /usr/libexec
        - /usr/lib64/clang
        - /usr/lib64/libclang*.so*
        - /usr/lib64/SampleAnalyzerPlugin.so
        - /usr/lib64/CheckerOptionHandlingAnalyzerPlugin.so
        - /usr/lib64/CheckerDependencyHandlingAnalyzerPlugin.so
        - /usr/share/man/*/*clang*
        - /usr/share/man/*/*scan-build*
        - /usr/share/llvm/cmake
        - /usr/share/clang
        - /usr/share/opt-viewer
        - /usr/share/scan-build
        - /usr/share/scan-view
    - devel :
        - /usr/bin/FileCheck
        - /usr/bin/bugpoint
        - /usr/bin/count
        - /usr/bin/dsymutil
        - /usr/bin/lli*
        - /usr/bin/llc*
        - /usr/bin/llvm*
        - /usr/bin/not
        - /usr/bin/obj2yaml
        - /usr/bin/opt
        - /usr/bin/sancov
        - /usr/bin/sanstats
        - /usr/bin/verify-uselistorder
        - /usr/bin/yaml-bench
        - /usr/bin/yaml2obj
        - /usr/share/llvm/cmake
replaces   :
    - clang : clang
    - clang-devel : clang-devel
environment: |
    # Decontaminate build environment
    unset LDFLAGS
    unset LD_AS_NEEDED
    unset CFLAGS
    unset CXXFLAGS

    ## BUILD STEPS for packager reference
    # PGO gen build
    # PGO profiling build
    # PGO use build
    # EMUL32 PGO use build
    # Install emul32 pgo use build
    # Install PGO use build
    # Thin LTO PGO use build
    # BOLT instrument libclang/libLLVM from Thin LTO PGO use build
    # BOLT profiling build
    # BOLT optimize libclang/libLLVM from Thin LTO PGO use build
    # Install BOLT'd Thin LTO PGO use build

    export _LLVM_FLAGS_FINAL="-march=x86-64 -mtune=generic -O3 -fstack-protector -pipe "
    export CC=clang
    export CXX=clang++

    # Identical code folding reduces size on disk.
    export LDFLAGS="${LDFLAGS} -Wl,--icf=all -Wl,--as-needed -Wl,-z,pack-relative-relocs"

    # Set flags, projects and targets to build for PGO gen/use builds.
    # We compile just the neccessities during the pgo gen build to speed things up
    if [[ ! -z "${PGO_GEN_BUILD}" ]]; then
        export PGOFLAGS="${_LLVM_FLAGS_FINAL} -fprofile-instr-generate=default-%m.profraw"
        export _PROJECTS="clang;lld;llvm"
        export _RUNTIMES="compiler-rt"
        export _TARGETS="host"
    fi
    if [[ ! -z "${PGO_USE_BUILD}" ]]; then
        PGO_PATH="/home/build/YPKG/root/llvm/pgo/default.profdata"
        export PGOFLAGS="${_LLVM_FLAGS_FINAL} -fprofile-instr-use=$PGO_PATH"
        export _PROJECTS="clang;clang-tools-extra;lld;llvm;mlir;polly"
        export _RUNTIMES="libcxxabi;libcxx;compiler-rt;openmp"
        export _TARGETS="all"
    fi

    # Set common build options here
    export CMAKE_COMMON_OPTIONS="
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=/usr \
        -DCLANG_DEFAULT_LINKER=lld \
        -DCLANG_DEFAULT_OBJCOPY=llvm-objcopy \
        -DCLANG_DEFAULT_PIE_ON_LINUX=ON \
        -DENABLE_EXPERIMENTAL_NEW_PASS_MANAGER=ON \
        -DLLVM_INSTALL_UTILS=ON \
        -DLLVM_INCLUDE_TESTS=OFF \
        -DLLVM_BINUTILS_INCDIR=/usr/include \
        -DLLVM_ENABLE_FFI=ON \
        -DLLVM_ENABLE_ZLIB=ON \
        -DLLVM_ENABLE_ZSTD=ON \
        -DLLVM_ENABLE_RTTI=ON \
        -DLLVM_ENABLE_ASSERTIONS=OFF \
        -DENABLE_LINKER_BUILD_ID=ON \
        -DLLVM_ENABLE_PIC=ON \
        -DLLVM_BUILD_LLVM_DYLIB=ON \
        -DLLVM_LINK_LLVM_DYLIB=ON \
        -DCLANG_LINK_CLANG_DYLIB=ON"

    # Used by everything except emul32 build
    export CMAKE_X84_64_OPTIONS="
         -DLLVM_DEFAULT_TARGET_TRIPLE=%HOST% \
         -DLLVM_TARGET_ARCH=x86_64 \
         -DLLVM_LIBDIR_SUFFIX=%LIBSUFFIX%"

    # Use the PGO Gen/Use Compiler
    export CMAKE_USE_COMPILER="
        -DCMAKE_AR=$workdir/solusBuildDir/bin/llvm-ar \
        -DCMAKE_NM=$workdir/solusBuildDir/bin/llvm-nm \
        -DCMAKE_RANLIB=$workdir/solusBuildDir/bin/llvm-ranlib \
        -DCMAKE_C_COMPILER=$workdir/solusBuildDir/bin/clang \
        -DCMAKE_CXX_COMPILER=$workdir/solusBuildDir/bin/clang++ \
        -DLLVM_CCACHE_BUILD=ON"
setup      : |
    # Just annoying.
    %patch -p1 -i $pkgfiles/0001-Silently-ignore-copy-dt-needed-entries.patch
    # Support solus, it's triplet, etc.
    %patch -p1 -i $pkgfiles/0001-Support-solus-as-a-distro.patch

    # AMDGPU related
    %patch -p1 -i $pkgfiles/fix-amdgpu-si-fold-operands-assertion-error.patch
    %patch -p1 -i $pkgfiles/fix-amdgpu-vgpr-live-range.patch
    %patch -p1 -i $pkgfiles/amdgpu-skip-debug-instrs-in-vgpr.patch
    %patch -p1 -i $pkgfiles/amdgpu-fix-delay-alu-1.patch
    %patch -p1 -i $pkgfiles/amdgpu-fix-delay-alu-2.patch
    %patch -p1 -i $pkgfiles/amdgpu-fix-delay-alu-3.patch

    pushd clang
        # Patch cfe for Solus specific options
        %patch -p1 -i $pkgfiles/0001-cfe-Use-correct-Solus-multilib-paths.patch
        %patch -p1 -i $pkgfiles/0001-Enable-stack-protector-strong-by-default.patch
        # Allow us to ignore -Werror even when projects force append them
        %patch -p2 -i $pkgfiles/ignore-werror.patch
    popd

    # Pull lld in line with binutils linkers for consistency
    pushd lld
        %patch -p1 -i $pkgfiles/0001-Enable-as-needed-with-LD_AS_NEEDED-variable.patch
        %patch -p1 -i $pkgfiles/0002-Make-gnuhash-the-default-when-not-specified.patch
    popd
build      : |
    ### PGO gen/use build for amd64.
    cmake -G Ninja -B solusBuildDir -S llvm \
        ${CMAKE_COMMON_OPTIONS} \
        ${CMAKE_X84_64_OPTIONS} \
        -DCMAKE_C_FLAGS_RELEASE="$PGOFLAGS" \
        -DCMAKE_CXX_FLAGS_RELEASE="$PGOFLAGS" \
        -DLLVM_ENABLE_PROJECTS=$_PROJECTS \
        -DLLVM_ENABLE_RUNTIMES=$_RUNTIMES \
        -DLLVM_TARGETS_TO_BUILD=$_TARGETS \
        -DLLVM_BUILD_DOCS=ON \
        -DLLVM_ENABLE_SPHINX=ON \
        -DSPHINX_EXECUTABLE="/usr/bin/sphinx-build" \
        -DSPHINX_OUTPUT_MAN=ON \
        -DSPHINX_OUTPUT_HTML=OFF \
        -DSPHINX_WARNINGS_AS_ERRORS=OFF
    %ninja_build -v

    ### EMUL32 Build
    # Reusing profile data from amd64 build saving a bunch of time (but slightly inaccurate).
    if [[ ! -z "${PGO_USE_BUILD}" ]]; then
        export PKG_CONFIG_PATH=/usr/lib32/pkgconfig:/usr/share/pkgconfig:/usr/lib/pkgconfig
        export LT_SYS_LIBRARY_PATH=/usr/lib32

        export CC="$workdir/solusBuildDir/bin/clang -m32"
        export CXX="$workdir/solusBuildDir/bin/clang++ -m32"

        export CFLAGS="-march=i686 -msse2 -mtune=generic -O3 -fstack-protector -pipe -fprofile-instr-use=$PGO_PATH -m32"
        export CXXFLAGS="-march=i686 -msse2 -mtune=generic -O3 -fstack-protector -pipe -fprofile-instr-use=$PGO_PATH -m32"

        cmake -G Ninja -B emul32 -S llvm \
          ${CMAKE_COMMON_OPTIONS} \
          -DLLVM_LIBDIR_SUFFIX=32 \
          -DLLVM_TARGET_ARCH=i686 \
          -DLLVM_DEFAULT_TARGET_TRIPLE=i686-pc-linux-gnu \
          -DLLVM_ENABLE_PROJECTS="clang;llvm" \
          -DLLVM_ENABLE_RUNTIMES="libcxx;libcxxabi;compiler-rt;openmp" \
          -DLLVM_TARGETS_TO_BUILD="host;AMDGPU;BPF" \
          -DCMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX=32 \
          -DLLVM_CCACHE_BUILD=ON
        ninja %JOBS% -C emul32 -v
    fi
profile    : |
    # Profiling with the instrumented compiler is very slow...
    # Building runtimes is only 600 files and we still get most of the benefits.
    cmake -G Ninja -B profile -S runtimes \
        ${CMAKE_COMMON_OPTIONS} \
        ${CMAKE_X84_64_OPTIONS} \
        ${CMAKE_USE_COMPILER} \
        -DLLVM_ENABLE_RUNTIMES='libcxx;libcxxabi' \
        -DCMAKE_C_FLAGS_RELEASE="$_LLVM_FLAGS_FINAL" \
        -DCMAKE_CXX_FLAGS_RELEASE="$_LLVM_FLAGS_FINAL"
    ninja %JOBS% -C profile -v
install    : |
    # Install emul32 build
    DESTDIR="%installroot%" ninja install -C emul32 -v
    mv $installdir/usr/include/llvm/Config/llvm-config.h $installdir/usr/include/llvm/Config/llvm-config-32.h
    mv $installdir/usr/bin/llvm-config{,32}

    # Install x86_64 build
    %ninja_install -v

    # Emit relocs for BOLT
    export LDFLAGS="${LDFLAGS} -Wl,-q"

    ### Thin LTO
    # Rebuild with thin LTO to avoid installing static files containing LLVM bitcode
    # by installing core toolchain bits only.
    cmake -G Ninja -B lto-build -S llvm \
        ${CMAKE_COMMON_OPTIONS} \
        ${CMAKE_X84_64_OPTIONS} \
        ${CMAKE_USE_COMPILER} \
        -DCMAKE_C_FLAGS_RELEASE="$PGOFLAGS" \
        -DCMAKE_CXX_FLAGS_RELEASE="$PGOFLAGS" \
        -DLLVM_ENABLE_PROJECTS="llvm;clang;lld;polly" \
        -DLLVM_TARGETS_TO_BUILD=$_TARGETS \
        -DLLVM_ENABLE_LTO=Thin \
        -DLLVM_INSTALL_TOOLCHAIN_ONLY=ON
    DESTDIR="%installroot%" ninja install -C lto-build -v

    ### BOLT
    # Instrument
    %bolt_instr $workdir/lto-build/lib64/libclang-cpp.so.16
    %bolt_instr $workdir/lto-build/lib64/libLLVM-16.so
    # Profile
    cmake -G Ninja -B bolt-profile -S runtimes \
        ${CMAKE_COMMON_OPTIONS} \
        ${CMAKE_X84_64_OPTIONS} \
        -DCMAKE_AR=$workdir/lto-build/bin/llvm-ar \
        -DCMAKE_NM=$workdir/lto-build/bin/llvm-nm \
        -DCMAKE_RANLIB=$workdir/lto-build/bin/llvm-ranlib \
        -DCMAKE_C_COMPILER=$workdir/lto-build/bin/clang \
        -DCMAKE_CXX_COMPILER=$workdir/lto-build/bin/clang++ \
        -DLLVM_ENABLE_RUNTIMES='libcxx;libcxxabi' \
        -DCMAKE_C_FLAGS_RELEASE="$_LLVM_FLAGS_FINAL" \
        -DCMAKE_CXX_FLAGS_RELEASE="$_LLVM_FLAGS_FINAL"
    ninja %JOBS% -C bolt-profile -v
    # Merge and optimize
    %bolt_merge $workdir/lto-build/lib64/libclang-cpp.so.16
    %bolt_merge $workdir/lto-build/lib64/libLLVM-16.so
    %bolt_opt $workdir/lto-build/lib64/libclang-cpp.so.16
    %bolt_opt $workdir/lto-build/lib64/libLLVM-16.so
    # Install BOLT'd libs over the LTO build
    install -Dm00777 $workdir/lto-build/lib64/libLLVM-16.so $installdir/usr/lib64/libLLVM-16.so
    install -Dm00755 $workdir/lto-build/lib64/libclang-cpp.so.16 $installdir/usr/lib64/libclang-cpp.so.16

    mv $installdir/usr/include/llvm/Config/llvm-config.h $installdir/usr/include/llvm/Config/llvm-config-%LIBSUFFIX%.h

    # Do NOT include libgomp*, it will conflict with libgomp
    rm $installdir/usr/lib*/libgomp.*

    # LTO Plugin
    install -d -D -m 00755 $installdir/%libdir%/bfd-plugins
    ln -sv ../LLVMgold.so $installdir/%libdir%/bfd-plugins/.
    # Finally add our compatibility header
    install -m 00644 $pkgfiles/llvm-config.h $installdir/usr/include/llvm/Config/llvm-config.h

    # For some reason, the include path only contains the major version now
    ln -sv %libdir%/clang/16 $installdir/%libdir%/clang/%version%
