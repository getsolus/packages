From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Luke Jones <luke@ljones.dev>
Date: Tue, 25 Mar 2025 21:36:36 +1300
Subject: [PATCH 06/26] asus-ally-hid: add force feedback to Ally X gamepad

Implement force feedback effects for the Ally X gamepad interface.

Signed-off-by: Luke Jones <luke@ljones.dev>
---
 .../hid/asus-ally-hid/asus-ally-hid-input.c   | 57 +++++++++++++++++++
 drivers/hid/asus-ally-hid/asus-ally.h         | 21 +++++++
 2 files changed, 78 insertions(+)

diff --git a/drivers/hid/asus-ally-hid/asus-ally-hid-input.c b/drivers/hid/asus-ally-hid/asus-ally-hid-input.c
index 54a33f5acc45..8c1b5f4295a4 100644
--- a/drivers/hid/asus-ally-hid/asus-ally-hid-input.c
+++ b/drivers/hid/asus-ally-hid/asus-ally-hid-input.c
@@ -28,13 +28,29 @@ static const int hat_values[][2] = {
 static void ally_x_work(struct work_struct *work)
 {
 	struct ally_x_input *ally_x = container_of(work, struct ally_x_input, output_worker);
+	struct ff_report *ff_report = NULL;
 	bool update_qam_chord = false;
+	bool update_ff = false;
 	unsigned long flags;
 
 	spin_lock_irqsave(&ally_x->lock, flags);
 	update_qam_chord = ally_x->update_qam_chord;
+
+	update_ff = ally_x->update_ff;
+	if (ally_x->update_ff) {
+		ff_report = kmemdup(ally_x->ff_packet, sizeof(*ally_x->ff_packet), GFP_KERNEL);
+		ally_x->update_ff = false;
+	}
 	spin_unlock_irqrestore(&ally_x->lock, flags);
 
+	if (update_ff && ff_report) {
+		ff_report->ff.magnitude_left = ff_report->ff.magnitude_strong;
+		ff_report->ff.magnitude_right = ff_report->ff.magnitude_weak;
+		ally_gamepad_send_packet(ally_x->ally, ally_x->hdev,
+					 (u8 *)ff_report, sizeof(*ff_report));
+	}
+	kfree(ff_report);
+
 	if (update_qam_chord) {
 		/*
 		 * The sleeps here are required to allow steam to register the button combo.
@@ -55,6 +71,28 @@ static void ally_x_work(struct work_struct *work)
 	}
 }
 
+static int ally_x_play_effect(struct input_dev *idev, void *data, struct ff_effect *effect)
+{
+	struct hid_device *hdev = input_get_drvdata(idev);
+	struct ally_handheld *ally = hid_get_drvdata(hdev);
+	struct ally_x_input *ally_x = ally->ally_x_input;
+	unsigned long flags;
+
+	if (effect->type != FF_RUMBLE)
+		return 0;
+
+	spin_lock_irqsave(&ally_x->lock, flags);
+	ally_x->ff_packet->ff.magnitude_strong = effect->u.rumble.strong_magnitude / 512;
+	ally_x->ff_packet->ff.magnitude_weak = effect->u.rumble.weak_magnitude / 512;
+	ally_x->update_ff = true;
+	spin_unlock_irqrestore(&ally_x->lock, flags);
+
+	if (ally_x->output_worker_initialized)
+		schedule_work(&ally_x->output_worker);
+
+	return 0;
+}
+
 /* Return true if event was handled, otherwise false */
 bool ally_x_raw_event(struct ally_x_input *ally_x, struct hid_report *report, u8 *data,
 			    int size)
@@ -219,6 +257,9 @@ static int ally_x_setup_input(struct hid_device *hdev, struct ally_x_input *ally
 	input_set_capability(input, EV_KEY, BTN_TRIGGER_HAPPY);
 	input_set_capability(input, EV_KEY, BTN_TRIGGER_HAPPY1);
 
+	input_set_capability(input, EV_FF, FF_RUMBLE);
+	input_ff_create_memless(input, NULL, ally_x_play_effect);
+
 	ret = input_register_device(input);
 	if (ret) {
 		input_unregister_device(input);
@@ -234,6 +275,7 @@ int ally_x_create(struct hid_device *hdev, struct ally_handheld *ally)
 {
 	uint8_t max_output_report_size;
 	struct ally_x_input *ally_x;
+	struct ff_report *ff_report;
 	int ret;
 
 	ally_x = devm_kzalloc(&hdev->dev, sizeof(*ally_x), GFP_KERNEL);
@@ -241,6 +283,7 @@ int ally_x_create(struct hid_device *hdev, struct ally_handheld *ally)
 		return -ENOMEM;
 
 	ally_x->hdev = hdev;
+	ally_x->ally = ally;
 	ally->ally_x_input = ally_x;
 
 	max_output_report_size = sizeof(struct ally_x_input_report);
@@ -255,6 +298,20 @@ int ally_x_create(struct hid_device *hdev, struct ally_handheld *ally)
 	ally_x->right_qam_steam_mode =
 		true;
 
+	ff_report = devm_kzalloc(&hdev->dev, sizeof(*ff_report), GFP_KERNEL);
+	if (!ff_report) {
+		ret = -ENOMEM;
+		goto free_ally_x;
+	}
+
+	/* None of these bytes will change for the FF command for now */
+	ff_report->report_id = 0x0D;
+	ff_report->ff.enable = 0x0F; /* Enable all by default */
+	ff_report->ff.pulse_sustain_10ms = 0xFF; /* Duration */
+	ff_report->ff.pulse_release_10ms = 0x00; /* Start Delay */
+	ff_report->ff.loop_count = 0xEB; /* Loop Count */
+	ally_x->ff_packet = ff_report;
+
 	if (sysfs_create_file(&hdev->dev.kobj, &dev_attr_ally_x_qam_mode.attr)) {
 		ret = -ENODEV;
 		goto unregister_input;
diff --git a/drivers/hid/asus-ally-hid/asus-ally.h b/drivers/hid/asus-ally-hid/asus-ally.h
index cd74bc65234b..94fcdd2ae727 100644
--- a/drivers/hid/asus-ally-hid/asus-ally.h
+++ b/drivers/hid/asus-ally-hid/asus-ally.h
@@ -71,7 +71,25 @@ struct ally_rgb_dev {
 	uint8_t blue[4];
 };
 
+/* rumble packet structure */
+struct ff_data {
+	u8 enable;
+	u8 magnitude_left;
+	u8 magnitude_right;
+	u8 magnitude_strong;
+	u8 magnitude_weak;
+	u8 pulse_sustain_10ms;
+	u8 pulse_release_10ms;
+	u8 loop_count;
+} __packed;
+
+struct ff_report {
+	u8 report_id;
+	struct ff_data ff;
+} __packed;
+
 struct ally_x_input {
+	struct ally_handheld *ally;
 	struct input_dev *input;
 	struct hid_device *hdev;
 	spinlock_t lock;
@@ -83,6 +101,9 @@ struct ally_x_input {
 	bool right_qam_steam_mode;
 	/* Prevent multiple queued event due to the enforced delay in worker */
 	bool update_qam_chord;
+
+	struct ff_report *ff_packet;
+	bool update_ff;
 };
 
 struct ally_handheld {
