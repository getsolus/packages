name       : linux-current
version    : 6.16.5
release    : 322
source     :
    - https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-6.16.5.tar.xz : 76bffbae7eab2a1de1ed05692bef709f43b02a52fe95ae655cacf0fa252213f3
license    : GPL-2.0-only
component  :
    - kernel.image
    - headers : kernel.devel
homepage   : https://www.kernel.org/
summary    :
    - Linux kernel image and modules (current)
    - headers : Linux kernel headers (current)
description:
    - The Linux kernel and modules, the core of the operating system
    - headers : Headers required for building out of tree kernel modules
builddeps  :
    - pkgconfig(devmapper)
    - pkgconfig(libelf)
    - bc
    - btrfs-progs
    - cpio
    - dracut
    - f2fs-tools
    - font-terminus-console
    - intel-microcode
    - kbd
    - libfido2
    - linux-firmware
    - lz4
    - nvme-cli
    - pahole
    - perl
    - sbsigntools
    - tpm2-tools
rundeps    :
    - scx-scheds
    - headers :
        - pahole
patterns   :
    - headers : /usr/src
permanent  :
    - /lib64/modules
    - /usr/lib64/kernel
    - /usr/lib64/modules
    - /usr/src
replaces   :
    - kernel
    - kernel-modules
    - headers : kernel-headers
environment: |
    # Maximize ccache efficiency as well as make the build fully reproducible, except for the initrd which needs a timestamp to be signed
    export KBUILD_BUILD_USER=root
    export KBUILD_BUILD_TIMESTAMP=$(date --utc --date=@$SOURCE_DATE_EPOCH +%F)

    export CCACHE_BASEDIR=$workdir
    export CCACHE_HASHDIR=yes
setup      : |
    %apply_patches

    # Make sure the kernel version is consistent with the package version, even if we set the package version to something different
    # We might do this if we're bisecting and don't want to mess with creating many different module dirs.
    major="$( cut -d '.' -f 1 <<< "$version" )"
    patch="$( cut -d '.' -f 2 <<< "$version" )"
    sub="$( cut -d '.' -f 3 <<< "$version" )"
    sed -e "s/^VERSION =.*/VERSION = $major/" -i Makefile
    sed -e "s/^PATCHLEVEL =.*/PATCHLEVEL = $patch/" -i Makefile
    sed -e "s/^SUBLEVEL =.*/SUBLEVEL = $sub/" -i Makefile

    # Set the EXTRAVERSION to the Solus-specific string
    extraVersion="-${release}.current"
    sed -e "s/^EXTRAVERSION =.*/EXTRAVERSION = $extraVersion/" -i Makefile

    # Ensure config is valid
    install $pkgfiles/config .config
    %make ARCH=x86_64 oldconfig

    # Zero stats so that we see how effective the caching is
    if [[ " ${PATH[*]} " =~ "ccache" ]]; then
        ccache --zero-stats
    fi
build      : |
    %make ARCH=x86_64 CONFIG_DEBUG_SECTION_MISMATCH=y KCFLAGS="-DAMD_PRIVATE_COLOR"
    %make -C tools/objtool

    if [[ " ${PATH[*]} " =~ "ccache" ]]; then
        ccache --show-stats
    fi
install    : |
    # Install kernel blob
    kernID="com.solus-project.current"
    kversion="${version}-${release}.current"
    install -D -m 0755 arch/x86/boot/bzImage $installdir/usr/lib64/kernel/$kernID.${version}-${release}

    # Install additional files
    install -m 00644 .config $installdir/usr/lib64/kernel/config-$kversion
    install -m 00644 System.map $installdir/usr/lib64/kernel/System.map-$kversion
    install -m 00644 $pkgfiles/cmdline $installdir/usr/lib64/kernel/cmdline-$kversion

    # Install kernel modules, disable depmod + firmware install
    install -dm00755 $installdir/lib/modules/$kversion
    %make ARCH=x86_64 INSTALL_MOD_PATH=$installdir/ modules_install KERNELRELEASE=$kversion mod-fw= DEPMOD=/bin/true

    # Fix mods
    depmod -b $installdir/ $kversion -a
    install -dm00755 $installdir/usr/lib64/modules
    mv -v $installdir/lib/modules/$kversion $installdir/usr/lib64/modules/
    rmdir -v $installdir/lib/modules $installdir/lib

    # Remove broken link
    rm -v $installdir/usr/lib64/modules/${kversion}/build

    # Mark this as the default "current" kernel
    ln -sv $kernID.${version}-${release} $installdir/usr/lib64/kernel/default-current

    # For virtiofs VMs, make a handy symlink that always points to the current kernel initrd and vmlinux
    ln -sv $kernID.${version}-${release} $installdir/usr/lib64/kernel/current-vmlinux
    ln -sv initrd-$kernID.${version}-${release} $installdir/usr/lib64/kernel/current-initrd

    # Strip the kernel modules for the initramfs. We can eke out some slight size improvements by keeping the modules
    # uncompressed before we compress the entire initramfs.
    mkdir -p decompressed-modules/lib/modules/
    cp -ra $installdir/usr/lib64/modules/${kversion} decompressed-modules/lib/modules/
    find "decompressed-modules" -name '*.ko' -exec strip --strip-unneeded {} \;

    # We can make the initrd smaller by decompressing the firmware prior to compressing the entire initrd.
    mkdir -p kernel-firmware/
    cp -ra /usr/lib64/firmware/* kernel-firmware
    file_list=()
    while IFS=  read -r -d $'\0'; do
        file_list+=("$REPLY")
    done < <(find kernel-firmware -type f -print0)
    for file in "${file_list[@]}"; do
        if [ -z ${file##*.zst} ]; then
            unzstd --rm "$file"
        fi
    done

    link_list=()
    while IFS=  read -r -d $'\0'; do
        link_list+=("$REPLY")
    done < <(find kernel-firmware -type l -print0)
    for file in "${link_list[@]}"; do
        link=$(readlink "$file")
        if [ -z ${link##*.zst} ]; then
            new_link="${link%.zst}"
            ln -sfv "$new_link" "$file"
        fi
        if [ -z ${file##*.zst} ]; then
            new_filename="${file%.zst}"
            mv -v "$file" "$new_filename"
        fi
    done

    # Store vendor initrd within the kernel package, prevent mangling from fakeroot
    # 2021-01-20: Force early KMS for everything except Nouveau (this will not work with Nvidia propretary)
    # 2024-04-21: Add vfio kernel modules to initrd as they need to be loaded very early in the boot process
    # 2024-10-14: Add modprobe configuration for Nvidia sleep options to cover early KMS module loading
    vfio_modules="vfio_pci vfio_iommu_type1"
    LD_PRELOAD='' dracut --tmpdir /tmp -N -f  \
        --kmoddir decompressed-modules/lib/modules/${kversion} --kver $kversion --fwdir kernel-firmware/ \
        --add "bash systemd lvm dm rescue resume fido2 tpm2-tss qemu virtiofs zz-init-extension" --omit "nvmf" \
        --strip --hardlink --zstd --reproducible --nomdadmconf --early-microcode \
        --add-drivers "amdgpu hyperv_drm i915 qxl radeon simpledrm virtio-gpu xe $vfio_modules" \
        --include $pkgfiles/initrd/timeouts.conf /usr/lib/systemd/system.conf.d/timeouts.conf \
        --include $pkgfiles/initrd/depmod.conf /usr/lib/depmod.d/depmod.conf \
        --include $pkgfiles/initrd/nvidia-sleep.modprobe /usr/lib/modprobe.d/nvidia-sleep.conf \
        $installdir/usr/lib64/kernel/initrd-$kernID.${version}-${release}

    # Sign with our MOK if we have the secureboot-keys submodule checked out.
    if [[ -e $pkgfiles/secureboot-keys/MOK.key ]]; then
        sbsign --key $pkgfiles/secureboot-keys/MOK.key \
                --cert $pkgfiles/secureboot-keys/MOK.crt \
                --output $installdir/usr/lib64/kernel/$kernID.${version}-${release} \
                $installdir/usr/lib64/kernel/$kernID.${version}-${release}
    fi

    # Install the headers
    tgtDir="/usr/src/linux-headers-$kversion"
    export dstDir="$installdir/$tgtDir"
    install -D -d -m 00755 $dstDir
    find . -path './include/*' -prune -o -path './scripts/*' -prune -o -path './Documentation/*' -prune -o -type f \( -name 'Makefile*' -o -name 'Kconfig*' -o -name 'Kbuild*' -o -name '*.sh' -o -name '*.pl' -o -name '*.lds' \) -print | cpio -pVd --preserve-modification-time $dstDir/

    # Necessary for out of tree modules
    for h in "drivers/media/dvb-frontends" "drivers/media/tuners"; do
        install -D -d -m 00755 $dstDir/$h
        cp -a $h/*.h $dstDir/$h
    done
    find drivers/media/platform/ -type f -name "*.h" | xargs -i sh -c 'install -D -d -m 00755 $dstDir/$(dirname {}); cp -a {} $dstDir/{}'

    # For a full headers pkg
    for p in "include" "scripts" "Documentation"; do
        cp -a $p $dstDir
    done

    # Nuke any unneeded bits.
    rm -f $dstDir/scripts/*.o
    rm -f $dstDir/scripts/*/*.o
    rm -rf $dstDir/Documentation/DocBook

    # Fix an issue that would otherwise require us to have fakeroot during the build (which makes the build MUCH slower expecially if you're using ccache)
    chmod +x $dstDir/scripts/basic/fixdep

    # Copy remaining include dirs
    (find arch -name include -type d -print | xargs -n1 -i: find : -type f) | cpio -pd --preserve-modification-time "$dstDir"

    # Shove last bits needed for out of tree kernel builds
    install -m 00644 Module.symvers $dstDir/.
    install -m 00644 System.map $dstDir/.
    install -m 00644 .config $dstDir/.config

    # Add objtool binary for CONFIG_STACK_VALIDATION (T5607)
    install -m 00755 tools/objtool/objtool $dstDir/tools/objtool/objtool

    # Fix up build/source links
    ln -svf build $installdir/usr/lib64/modules/$kversion/source
    ln -srvf ${dstDir} $installdir/usr/lib64/modules/$kversion/build

    # Compress modules with zstd and strip them in the process
    # TODO remove this once the kernel module compression w/ dbginfo is fixed
    find "$installdir/usr/lib64/modules" -name '*.ko' -exec strip --strip-debug {} \; -exec zstd {} \; -exec rm -v {} \;

    # Usr-merge
    install -dm00755 $installdir/lib64
    pushd $installdir/usr
    file_list=()
    while IFS=  read -r -d $'\0'; do
        file_list+=("$REPLY")
    done < <(find lib64/modules -type f -print0)
    for file in "${file_list[@]}"; do
        parent=$(dirname "$file")
        install -dm00755 "$installdir/$parent"
        ln -srv "$installdir/usr/$file" "$installdir/$file"
    done
    popd
    ln -svf build $installdir/lib64/modules/$kversion/source
    ln -srvf ${dstDir} $installdir/lib64/modules/$kversion/build
