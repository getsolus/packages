diff --git a/clang/lib/Driver/ToolChains/CommonArgs.cpp b/clang/lib/Driver/ToolChains/CommonArgs.cpp
index 443725f7d8..a035d1c021 100644
--- a/clang/lib/Driver/ToolChains/CommonArgs.cpp
+++ b/clang/lib/Driver/ToolChains/CommonArgs.cpp
@@ -1838,7 +1838,7 @@ bool tools::GetSDLFromOffloadArchive(
     std::string OutputArg("-output=" + OutputLib);
 
     const char *UBProgram = DriverArgs.MakeArgString(
-        T.getToolChain().GetProgramPath("clang-offload-bundler"));
+        T.getToolChain().GetProgramPath("clang-offload-bundler-15"));
 
     ArgStringList UBArgs;
     UBArgs.push_back(C.getArgs().MakeArgString(UnbundleArg));
diff --git a/clang/lib/Driver/ToolChains/HIPAMD.cpp b/clang/lib/Driver/ToolChains/HIPAMD.cpp
index b31077c1fd..f60dcf7551 100644
--- a/clang/lib/Driver/ToolChains/HIPAMD.cpp
+++ b/clang/lib/Driver/ToolChains/HIPAMD.cpp
@@ -96,7 +96,7 @@ void AMDGCN::Linker::constructLlvmLinkCommand(Compilation &C,
                              /*PostClangLink=*/false);
 
   const char *LlvmLink =
-    Args.MakeArgString(getToolChain().GetProgramPath("llvm-link"));
+    Args.MakeArgString(getToolChain().GetProgramPath("llvm-link-15"));
   C.addCommand(std::make_unique<Command>(JA, *this, ResponseFileSupport::None(),
                                          LlvmLink, LlvmLinkArgs, Inputs,
                                          Output));
@@ -162,7 +162,7 @@ void AMDGCN::Linker::constructLldCommand(Compilation &C, const JobAction &JA,
                              /*IsBitCodeSDL=*/true,
                              /*PostClangLink=*/false);
 
-  const char *Lld = Args.MakeArgString(getToolChain().GetProgramPath("lld"));
+  const char *Lld = Args.MakeArgString(getToolChain().GetProgramPath("lld-15"));
   C.addCommand(std::make_unique<Command>(JA, *this, ResponseFileSupport::None(),
                                          Lld, LldArgs, Inputs, Output));
 }
diff --git a/clang/lib/Driver/ToolChains/HIPUtility.cpp b/clang/lib/Driver/ToolChains/HIPUtility.cpp
index 6f8c563c22..4911cea451 100644
--- a/clang/lib/Driver/ToolChains/HIPUtility.cpp
+++ b/clang/lib/Driver/ToolChains/HIPUtility.cpp
@@ -85,7 +85,7 @@ void HIP::constructHIPFatbinCommand(Compilation &C, const JobAction &JA,
   BundlerArgs.push_back(BundlerOutputArg);
 
   const char *Bundler = Args.MakeArgString(
-      T.getToolChain().GetProgramPath("clang-offload-bundler"));
+      T.getToolChain().GetProgramPath("clang-offload-bundler-15"));
   C.addCommand(std::make_unique<Command>(
       JA, T, ResponseFileSupport::None(), Bundler, BundlerArgs, Inputs,
       InputInfo(&JA, Args.MakeArgString(Output))));
@@ -165,7 +165,7 @@ void HIP::constructGenerateObjFileFromHIPFatBinary(
   ArgStringList McArgs{"-triple", Args.MakeArgString(HostTriple.normalize()),
                        "-o",      Output.getFilename(),
                        McinFile,  "--filetype=obj"};
-  const char *Mc = Args.MakeArgString(TC.GetProgramPath("llvm-mc"));
+  const char *Mc = Args.MakeArgString(TC.GetProgramPath("llvm-mc-15"));
   C.addCommand(std::make_unique<Command>(JA, T, ResponseFileSupport::None(), Mc,
                                          McArgs, Inputs, Output));
 }
diff --git a/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp b/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp
index 44b55c6a45..ed139f649e 100644
--- a/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp
+++ b/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp
@@ -554,7 +554,7 @@ Expected<StringRef> link(ArrayRef<StringRef> InputFiles, const ArgList &Args) {
   llvm::TimeTraceScope TimeScope("AMDGPU linker");
   // AMDGPU uses lld to link device object files.
   Expected<std::string> LLDPath =
-      findProgram("lld", {getMainExecutable("lld")});
+      findProgram("lld-15", {getMainExecutable("lld-15")});
   if (!LLDPath)
     return LLDPath.takeError();
 
@@ -600,7 +600,7 @@ fatbinary(ArrayRef<std::pair<StringRef, StringRef>> InputFiles,
 
   // AMDGPU uses the clang-offload-bundler to bundle the linked images.
   Expected<std::string> OffloadBundlerPath = findProgram(
-      "clang-offload-bundler", {getMainExecutable("clang-offload-bundler")});
+      "clang-offload-bundler-15", {getMainExecutable("clang-offload-bundler-15")});
   if (!OffloadBundlerPath)
     return OffloadBundlerPath.takeError();
 
