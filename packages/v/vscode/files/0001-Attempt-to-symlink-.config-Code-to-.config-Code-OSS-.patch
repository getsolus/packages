From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Troy Harvey <harveydevel@gmail.com>
Date: Fri, 7 Oct 2022 09:38:01 +1100
Subject: [PATCH] Attempt to symlink .config/Code to .config/Code - OSS if Code
 does not exist.

This ensures some extensions that specifically check for Code will function. Additionally don't bother doing the platform checks. We're on Linux.

Signed-off-by: Troy Harvey <harveydevel@gmail.com>
---
 .../platform/environment/node/userDataPath.ts | 48 +++++--------------
 1 file changed, 11 insertions(+), 37 deletions(-)

diff --git a/src/vs/platform/environment/node/userDataPath.ts b/src/vs/platform/environment/node/userDataPath.ts
index 3d0037b28c2..bc83428ca4a 100644
--- a/src/vs/platform/environment/node/userDataPath.ts
+++ b/src/vs/platform/environment/node/userDataPath.ts
@@ -3,6 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
+import * as fs from 'fs';
 import { homedir } from 'os';
 import { NativeParsedArgs } from '../common/argv.js';
 
@@ -44,21 +45,17 @@ export function getUserDataPath(cliArgs: NativeParsedArgs, productName: string):
 
 function doGetUserDataPath(cliArgs: NativeParsedArgs, productName: string): string {
 
-	// 0. Running out of sources has a fixed productName
-	if (process.env['VSCODE_DEV']) {
-		productName = 'code-oss-dev';
-	}
-
-	// 1. Support portable mode
-	const portablePath = process.env['VSCODE_PORTABLE'];
-	if (portablePath) {
-		return join(portablePath, 'user-data');
-	}
 
 	// 2. Support global VSCODE_APPDATA environment variable
-	let appDataPath = process.env['VSCODE_APPDATA'];
-	if (appDataPath) {
-		return join(appDataPath, productName);
+	let appDataPath = process.env['VSCODE_APPDATA'] || process.env['XDG_CONFIG_HOME'] || join(homedir(), '.config');
+	let codePath = join(appDataPath, productName);
+	if (productName === "Code - OSS") {
+		let nonOSSPath = join(appDataPath, "Code");
+		fs.access(nonOSSPath, fs.constants.F_OK, (error: any) => {
+			if (error) {
+				fs.symlinkSync(codePath, nonOSSPath);
+			}
+		});
 	}
 
 	// With Electron>=13 --user-data-dir switch will be propagated to
@@ -70,28 +67,5 @@ function doGetUserDataPath(cliArgs: NativeParsedArgs, productName: string): stri
 		return cliPath;
 	}
 
-	// 4. Otherwise check per platform
-	switch (process.platform) {
-		case 'win32':
-			appDataPath = process.env['APPDATA'];
-			if (!appDataPath) {
-				const userProfile = process.env['USERPROFILE'];
-				if (typeof userProfile !== 'string') {
-					throw new Error('Windows: Unexpected undefined %USERPROFILE% environment variable');
-				}
-
-				appDataPath = join(userProfile, 'AppData', 'Roaming');
-			}
-			break;
-		case 'darwin':
-			appDataPath = join(homedir(), 'Library', 'Application Support');
-			break;
-		case 'linux':
-			appDataPath = process.env['XDG_CONFIG_HOME'] || join(homedir(), '.config');
-			break;
-		default:
-			throw new Error('Platform not supported');
-	}
-
-	return join(appDataPath, productName);
+	return codePath
 }
