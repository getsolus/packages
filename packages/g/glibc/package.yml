name       : glibc
version    : '2.41'
release    : 133
source     :
    # release/2.41/master
    # Use the bminor mirror since the upstream is unreliable
    - git|https://github.com/bminor/glibc : 5cf17ebc659c875aff3c49d2a59ce15f46167389
homepage   : https://www.gnu.org/software/libc/
license    : GPL-3.0-or-later
summary    :
    - This package contains the GNU C libraries and header files
    - benchmarks : Various benchmarks to test the performance of GNU C libraries
description: |
    This package contains the GNU C libraries and header files.  The GNU C library was written originally by Roland McGrath, and is currently maintained by Ulrich Drepper.  Some parts of the library were contributed or worked on by other people. You'll need this package to compile programs.
libsplit   : false
devel      : true
autodep    : false
emul32     : true
avx2       : true
component  : system.base
patterns   :
    - 32bit :
        - /lib32/ld-linux.so.2
        - /lib64/ld-linux.so.2
        - /usr/lib64/ld-linux.so.2
    - 32bit-devel :
        - /usr/lib32/*.o
        - /usr/lib32/libc_malloc_debug.so*
    - benchmarks : /usr/bin/bench-*
    - devel :
        - /usr/bin/mtrace
        - /usr/bin/pcprofiledump
        - /usr/bin/xtrace
        - /usr/lib64/*.o
        - /usr/lib64/libc_malloc_debug.so*
setup      : |
    # Solus multilib integration

    # Ensure that ldd can use all interpreters, allowing 64-bit host to run ldd
    # against 32-bit files.
    %patch -p1 -i $pkgfiles/0001-ldd-Force-correct-RTLDLIST-for-Solus.patch

    # Enable /usr/lib32 in ldconfig without requiring config files
    %patch -p1 -i $pkgfiles/0002-sysdeps-Add-support-for-usr-lib32-as-a-system-librar.patch

    # Use a stateless ld.so.conf
    %patch -p1 -i $pkgfiles/stateless/0003-elf-ldconfig-Use-a-stateless-ld.so.conf.patch

    # Stateless /etc/shells
    %patch -p1 -i $pkgfiles/stateless/0001-misc-Support-fallback-stateless-shells-path-in-absen.patch

    # Stateless /etc/nsswitch.conf
    %patch -p1 -i $pkgfiles/stateless/0001-Stateless-nsswitch.conf.patch

    # Stateless other modules (/etc/rpc)
    %patch -p1 -i $pkgfiles/stateless/0001-Stateless-NSS.patch

    # Allow Steam users with CPU ISA not supporting AVX2 to add an environmental variable to force ldconfig to ignore hwcaps libs
    # https://github.com/ValveSoftware/steam-for-linux/issues/10556
    %patch -p1 -i $pkgfiles/0001-Add-hack-for-steam-users-to-skip-hwcaps-directories.patch

    # locale data only exists in /usr/lib64 so hardcode it
    %patch -p1 -i $pkgfiles/0001-Hardcode-usr-lib64-path-for-locale.patch

    # Clear Linux backports for performance improvements/regression fixes.
    %patch -p1 -i $pkgfiles/perf/0001-Set-vector-width-and-alignment-to-fix-GCC-AVX-issue.patch
    %patch -p1 -i $pkgfiles/perf/disable-vectorization-even-more.patch

    # Other Clear Linux performance patches
    %patch -p1 -i $pkgfiles/perf/0001-Use-KSM-for-the-BSS-segment-of-shared-libraries.patch
    %patch -p1 -i $pkgfiles/perf/0002-tune-adaptive-spin-count.patch
    %patch -p1 -i $pkgfiles/perf/0003-Malloc-tuning.patch

    # Build glibc with both DT_HASH and DT_GNU_HASH for EasyAntiCheat on linux
    %patch -p1 -i $pkgfiles/reenable_DT_HASH.patch

    # Compress charmaps with zstd for space savings
    %patch -p1 -i $pkgfiles/0001-Compress-charmaps-with-zstd.patch

    mkdir glibc-build
    cd glibc-build

    extra_conf_args=""
    if [[ ! -z "${EMUL32BUILD}" ]]; then
        mkdir b32 && cd b32
        export CC="gcc -m32"
        export CXX="g++ -m32"
        export BUILDHOST="i686-pc-linux-gnu"
        export CFLAGS="-O3 -g2 -mtune=generic -march=i686 -mstackrealign"
    else
        mkdir b64 && cd b64
        export CC="gcc"
        export CXX="g++"
        export BUILDHOST="x86_64-solus-linux"
        if [[ ! -z "${AVX2BUILD}" ]]; then
            export CFLAGS="-O3 -g2 -mtune=haswell -march=x86-64-v3 -mprefer-vector-width=128"
        else
            export CFLAGS="-O3 -g2 -mtune=generic -march=x86-64"
        fi
        # Only supported on x86_64 as of glibc v2.39
        extra_conf_args="--enable-cet"
    fi
    export LDFLAGS="-Wl,-z,max-page-size=0x1000"
    echo "rootsbindir=/usr/sbin" >> configparms
    echo "rtlddir=%libdir%" >> configparms
    echo "sbindir=/usr/sbin" >> configparms
    echo "slibdir=%libdir%" >> configparms
    # these params need to be coming from ypkg (build=)

    export LANGUAGE="C"
    export LC_ALL="C"
    export LANG="C"

    # The minimum kernel should track the supported kernel versions at kernel.org. Look under "longterm" and choose the fourth kernel.
    # Example, at the time of writing this the LTS kernels are 6.6, 6.1, 5.15, 5.10, 5.4, 4.19, and 4.14. Therefore I would choose 5.10 as the kernel for glibc.
    # The point of doing this and not tracking the kernel version of linux-lts is that some users may have manually compiled older kernels or be running
    # in a container. We don't want to break such users, but there still needs to be a cutoff.
    ../../configure \
           --build=${BUILDHOST} \
           --disable-build-nscd \
           --disable-nscd \
           --enable-bind-now \
           --enable-kernel=5.15 \
           --enable-stack-protector=strong \
           --enable-systemtap \
           --prefix=/usr \
           --mandir=/usr/share/man \
           --infodir=/usr/share/info \
           --libexecdir=%libdir%/misc \
           --libdir=%libdir% \
           --with-pkgversion='Solus' \
           $extra_conf_args
build      : |
    cd glibc-build
    export LANGUAGE="C"
    export LC_ALL="C"
    export LANG="C"

    if [[ "${EMUL32BUILD}" ]]; then
        cd b32
        export CC="gcc -m32"
        export CXX="g++ -m32"
        export CFLAGS="-O3 -g2 mtune=generic -march=i686 -Wl,-z,max-page-size=0x1000"
    else
        cd b64
        export CC="gcc"
        export CXX="g++"
        if [[ ! -z "${AVX2BUILD}" ]]; then
            export CFLAGS="-O3 -g2 -mtune=haswell -march=x86-64-v3 -Wl,-z,max-page-size=0x1000"
        else
            export CFLAGS="-O3 -g2 -mtune=generic -march=x86-64 -Wl,-z,max-page-size=0x1000"
        fi
    fi
    export LDFLAGS="-Wl,-z,max-page-size=0x1000"
    %make

    # Ifdef to prevent running avx2 instructions on non-avx2 machines
    if [[ -z "${AVX2BUILD}" ]]; then
        %make bench-build
    fi
install    : |
    cd glibc-build

    if [[ ! -z "${EMUL32BUILD}" ]]; then
        cd b32
        %make_install install_root=$installdir
    else
        cd b64
        %make_install install_root=$installdir

        if [[ -z "${AVX2BUILD}" ]]; then
            %make_install install_root=$installdir localedata/install-locale-files

            # Hardlink everything to save space
            pushd $installdir/usr/lib64/locale/
            hardlink -c ../locale
            # Convert some of the hardlinks to symlinks in case we split out the additional locales (C.utf8 must stay in the glibc package)
            for r in LC_CTYPE LC_MEASUREMENT LC_PAPER; do
                for f in $(find eo syr *_* -samefile C.utf8/$r); do
                    rm $f && ln -s "../C.utf8/$r" $f
                done
            done
            popd

            if [[ -f $installdir/etc/ld.so.cache ]]; then
                rm -v $installdir/etc/ld.so.cache
            fi

            if [[ -f $installdir/etc/localetime ]]; then
                rm -v $installdir/etc/localetime
            fi

            if [[ -d $installdir/usr/share/zoneinfo ]]; then
                rm -rfv $installdir/usr/share/zoneinfo
            fi

            if [[ -f $installdir/usr/sbin/zdump ]]; then
                rm -v $installdir/usr/sbin/zdump
            fi

            # usr-merge
            install -dm00755 $installdir/lib64
            ln -srv $installdir/usr/lib64/ld-linux-x86-64.so.2 $installdir/lib64/ld-linux-x86-64.so.2
            install -dm00755 $installdir/sbin
            ln -srv $installdir/usr/sbin/ldconfig $installdir/sbin/ldconfig
            ln -srv $installdir/usr/sbin/sln $installdir/sbin/sln

            # This is a vendored copy from the 5.0 systemtap package, it should be kept in sync with the systemtap version
            install -Dm00644 $pkgfiles/systemtap/{sdt.h,sdt-config.h} -t $installdir/usr/include/sys

            # Install stateless ld.so.conf
            install -Dm00644 $pkgfiles/ld.so.conf $installdir/usr/share/defaults/etc/ld.so.conf

            # More stateless
            mv $installdir/etc/rpc $installdir/usr/share/defaults/etc/
            rmdir -v $installdir/etc

            # iconv cache file
            # LD_LIBRARY_PATH hacks to get this working, fixed in 2.36.
            LD_LIBRARY_PATH=$installdir/%libdir% $installdir/%libdir%/ld-linux-x86-64.so.2 $installdir/usr/sbin/iconvconfig --prefix=$installdir

            # We need to create these in the 64-bit build otherwise the avx build would mangle them
            # Test for the existence of the 32-bit dynamic loader so we can tell if an emul32 build was done
            if test -f $installdir/usr/lib32/ld-linux.so.2; then
                install -dm00755 $installdir/{,usr/}lib{32,64}
                ln -srv $installdir/usr/lib32/ld-linux.so.2 $installdir/usr/lib64/ld-linux.so.2
                ln -srv $installdir/usr/lib32/ld-linux.so.2 $installdir/lib64/ld-linux.so.2
                ln -srv $installdir/usr/lib32/ld-linux.so.2 $installdir/lib32/ld-linux.so.2
            fi
        fi
    fi

    # Benchmarks
    if [[ -z "${AVX2BUILD}" ]]; then
        for f in benchtests/*; do [ -x $f -a ! -d $f ] && cp -a $f $installdir/usr/bin/; done
    fi

    # Clear out uneeded haswell files
    if [[ ! -z "${AVX2BUILD}" ]]; then
        for nuke in `ls $installdir/%libdir% | grep -v -E "libm.so.6|libm-$version.so|libc.so.6|libc-$version.so|libmvec|libcrypt"`; do
            rm -rfv $installdir/%libdir%/${nuke}
        done
    fi

    # None of these are needed on Solus, but could be added back by user demand (though in a stateless way)
    # libnss_db is particularly problematic for statelessness due to /var/db/Makefile
    rm -fv $installdir/%libdir%/libnss_db.so* \
           $installdir/%libdir%/libnss_hesiod.so* \
           $installdir/usr/bin/makedb \
           $installdir/var/db/Makefile
    # Cleanup
    find $installdir -type d -empty -print -delete
