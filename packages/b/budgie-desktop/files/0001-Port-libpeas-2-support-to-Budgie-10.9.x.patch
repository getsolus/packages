From a4f351c0e7c6363de1791bf4ea60420b42ebefe4 Mon Sep 17 00:00:00 2001
From: Joshua Strobl <me@joshuastrobl.com>
Date: Wed, 10 Sep 2025 21:28:50 +0300
Subject: [PATCH 01/11] port over libpeas-2 support PR

---
 .github/workflows/build.yml    |  2 +-
 meson.build                    |  3 +-
 src/meson.build                |  2 +-
 src/panel/meson.build          |  1 +
 src/panel/panel.vala           | 61 +++++++++++++++++++---------------
 src/panel/plugin_manager.vala  | 22 +++++++-----
 src/plugin/panel/applet-info.c |  1 -
 src/plugin/panel/applet-info.h |  3 +-
 src/plugin/panel/meson.build   |  6 ++--
 src/raven/meson.build          |  1 +
 src/raven/plugin_manager.vala  | 19 ++++++-----
 11 files changed, 70 insertions(+), 51 deletions(-)

diff --git a/.github/workflows/build.yml b/.github/workflows/build.yml
index 160d944a3..0b40ed28a 100644
--- a/.github/workflows/build.yml
+++ b/.github/workflows/build.yml
@@ -26,7 +26,7 @@ jobs:
             'pkgconfig(ibus-1.0)' \
             'pkgconfig(libcanberra)' \
             'pkgconfig(libnotify)' \
-            'pkgconfig(libpeas-1.0)' \
+            'pkgconfig(libpeas-2)' \
             'pkgconfig(libpulse)' \
             'pkgconfig(libwacom)' \
             'pkgconfig(libwnck-3.0)' \
diff --git a/meson.build b/meson.build
index 9593a8a3e..454ef7ffe 100644
--- a/meson.build
+++ b/meson.build
@@ -44,7 +44,8 @@ dep_gtk3 = dependency('gtk+-3.0', version: '>= 3.24.0')
 dep_glib = dependency('glib-2.0', version: '>= 2.64.0')
 dep_gee = dependency('gee-0.8', version: '>= 0.20.0')
 dep_giounix = dependency('gio-unix-2.0', version: '>= 2.64.0')
-dep_peas = dependency('libpeas-1.0', version: '>= 1.26.0')
+dep_gobject_introspection = dependency('gobject-introspection-1.0', version: '>= 1.84.0')
+dep_peas = dependency('libpeas-2', version: '>= 1.99.0')
 dep_gdkx11 = dependency('gdk-x11-3.0', version: '>= 3.24.0')
 dep_libuuid = dependency('uuid')
 dep_vala = dependency('vapigen', version: '>= 0.52.5')
diff --git a/src/meson.build b/src/meson.build
index 355a98e3e..f475c09a8 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -1,8 +1,8 @@
 # Control the order and relation between the subcomponents in Budgie
 
 # Library components
-subdir('plugin')
 subdir('config')
+subdir('plugin')
 subdir('libsession')
 
 # Needed for daemon + applets
diff --git a/src/panel/meson.build b/src/panel/meson.build
index ec7721ed9..410644bf4 100644
--- a/src/panel/meson.build
+++ b/src/panel/meson.build
@@ -45,6 +45,7 @@ panel_sources = [
 panel_deps = [
     libpanelplugin_vapi,
     dep_giounix,
+    dep_gobject_introspection,
     dep_gtk3,
     dep_peas,
     dep_libuuid,
diff --git a/src/panel/panel.vala b/src/panel/panel.vala
index 7e4759d7f..06be34325 100644
--- a/src/panel/panel.vala
+++ b/src/panel/panel.vala
@@ -474,13 +474,14 @@ namespace Budgie {
 				string? uuid = null;
 
 				while (iter.next(out uuid, null)) {
+					Budgie.AppletInfo? info = null;
 					string? uname = null;
-					Budgie.AppletInfo? info = this.plugin_manager.load_applet_instance(uuid, out uname);
-					if (info == null) {
+					try {
+						info = this.plugin_manager.load_applet_instance(uuid, null, out uname);
+						add_applet(info);
+					} catch (Error e) {
 						critical("Failed to load applet when we know it exists: %s", uname);
-						return;
 					}
-					this.add_applet(info);
 				}
 				pending.remove(name);
 			}
@@ -493,12 +494,13 @@ namespace Budgie {
 				string? uuid = null;
 
 				while (iter.next(out uuid, null)) {
-					Budgie.AppletInfo? info = this.plugin_manager.create_new_applet(name, uuid);
-					if (info == null) {
+					Budgie.AppletInfo? info = null;
+					try {
+						info = this.plugin_manager.create_applet(name, uuid);
+						add_applet(info);
+					} catch (Error e) {
 						critical("Failed to load applet when we know it exists");
-						return;
 					}
-					this.add_applet(info);
 					/* this.configure_applet(info); */
 				}
 				creating.remove(name);
@@ -531,22 +533,28 @@ namespace Budgie {
 
 				for (int i = 0; i < applets.length; i++) {
 					string? name = null;
-					Budgie.AppletInfo? info = this.plugin_manager.load_applet_instance(applets[i], out name);
+					Budgie.AppletInfo? info = null;
 
-					if (info == null) {
+					try {
+						info = this.plugin_manager.load_applet_instance(applets[i], null, out name);
+					} catch (Error e) {
 						if (name == null) {
 							unowned List<string?> g = expected_uuids.find_custom(applets[i], strcmp);
+
 							if (g != null) {
 								expected_uuids.remove_link(g);
 							}
-							message("Unable to load invalid applet: %s", applets[i]);
+
+							message("Unable to load invalid applet '%s': %s", applets[i], e.message);
 							applet_removed(applets[i]);
-							continue;
-						}
 
-						info = this.add_pending(applets[i], name);
-						if (info == null) {
 							continue;
+						} else {
+							info = this.add_pending(applets[i], name);
+
+							if (info == null) {
+								continue;
+							}
 						}
 					}
 
@@ -892,7 +900,7 @@ namespace Budgie {
 			string? uuid = null;
 			unowned HashTable<string,string>? table = null;
 
-			if (!this.plugin_manager.is_extension_valid(plugin_name)) {
+			if (!this.plugin_manager.is_plugin_valid(plugin_name)) {{
 				warning("Not loading invalid plugin: %s", plugin_name);
 				return;
 			}
@@ -902,7 +910,7 @@ namespace Budgie {
 				uuid = initial_uuid;
 			}
 
-			if (!this.plugin_manager.is_extension_loaded(plugin_name)) {
+			if (!this.plugin_manager.is_plugin_loaded(plugin_name)) {
 				/* Request a load of the new guy */
 				table = creating.lookup(plugin_name);
 				if (table != null) {
@@ -919,25 +927,25 @@ namespace Budgie {
 				return;
 			}
 			/* Already exists */
-			Budgie.AppletInfo? info = this.plugin_manager.create_new_applet(plugin_name, uuid);
-			if (info == null) {
+			try {
+				Budgie.AppletInfo? info = this.plugin_manager.create_applet(plugin_name, uuid);
+				this.add_applet(info);
+			} catch (Error e) {
 				critical("Failed to load applet when we know it exists");
 				return;
 			}
-			this.add_applet(info);
-			return;
 		}
 
 		Budgie.AppletInfo? add_pending(string uuid, string plugin_name) {
 			string? rname = null;
 			unowned HashTable<string,string>? table = null;
 
-			if (!this.plugin_manager.is_extension_valid(plugin_name)) {
+			if (!this.plugin_manager.is_plugin_valid(plugin_name)) {
 				warning("Not adding invalid plugin: %s %s", plugin_name, uuid);
 				return null;
 			}
 
-			if (!this.plugin_manager.is_extension_loaded(plugin_name)) {
+			if (!this.plugin_manager.is_plugin_loaded(plugin_name)) {
 				/* Request a load of the new guy */
 				table = pending.lookup(plugin_name);
 				if (table != null) {
@@ -955,10 +963,11 @@ namespace Budgie {
 			}
 
 			/* Already exists */
-			Budgie.AppletInfo? info = this.plugin_manager.load_applet_instance(uuid, out rname);
-			if (info == null) {
+			Budgie.AppletInfo? info = null;
+			try {
+				info = this.plugin_manager.load_applet_instance(uuid, null, out rname);
+			} catch (Error e) {
 				critical("Failed to load applet when we know it exists");
-				return null;
 			}
 			return info;
 		}
diff --git a/src/panel/plugin_manager.vala b/src/panel/plugin_manager.vala
index f4f2e4daf..28d1dd28a 100644
--- a/src/panel/plugin_manager.vala
+++ b/src/panel/plugin_manager.vala
@@ -27,13 +27,12 @@ namespace Budgie {
 			settings = new Settings(Budgie.ROOT_SCHEMA);
 
 			engine = new Peas.Engine();
-			engine.enable_loader("python3");
+			engine.enable_loader("python");
 
 			/* Ensure libpeas doesn't freak the hell out for Python extensions */
 			try {
 				var repo = GI.Repository.get_default();
-				repo.require("Peas", "1.0", 0);
-				repo.require("PeasGtk", "1.0", 0);
+				repo.require("Peas", "2", 0);
 				repo.require("Budgie", "1.0", 0);
 			} catch (Error e) {
 				message("Error loading typelibs: %s", e.message);
@@ -60,7 +59,7 @@ namespace Budgie {
 			}
 			engine.rescan_plugins();
 
-			extensions = new Peas.ExtensionSet(engine, typeof(Budgie.Plugin));
+			extensions = new Peas.ExtensionSet.with_properties(engine, typeof(Budgie.Plugin), {}, {});
 
 			extensions.extension_added.connect(on_extension_added);
 			engine.load_plugin.connect_after((i) => {
@@ -115,9 +114,14 @@ namespace Budgie {
 
 		public List<Peas.PluginInfo?> get_all_plugins() {
 			List<Peas.PluginInfo?> ret = new List<Peas.PluginInfo?>();
-			foreach (unowned Peas.PluginInfo? info in this.engine.get_plugin_list()) {
-				ret.append(info);
+			var list = this.engine.get_n_items();
+			for (int i=0; i < list; i++) {
+				Peas.PluginInfo? info = (Peas.PluginInfo)this.engine.get_item(i);
+				if (info != null) {
+					ret.append(info);
+				}
 			}
+			
 			return ret;
 		}
 
@@ -130,7 +134,9 @@ namespace Budgie {
 		* PeasEngine.get_plugin_info == completely broken
 		*/
 		private unowned Peas.PluginInfo? get_plugin_info(string name) {
-			foreach (unowned Peas.PluginInfo? info in this.engine.get_plugin_list()) {
+			var list = this.engine.get_n_items();
+			for (int i=0; i < list; i++) {
+				Peas.PluginInfo? info = (Peas.PluginInfo)this.engine.get_item(i);
 				if (info.get_name() == name) {
 					return info;
 				}
@@ -144,7 +150,7 @@ namespace Budgie {
 				warning("budgie_panel_modprobe called for non existent module: %s", name);
 				return;
 			}
-			this.engine.try_load_plugin(i);
+			this.engine.load_plugin(i);
 		}
 
 		/**
diff --git a/src/plugin/panel/applet-info.c b/src/plugin/panel/applet-info.c
index b8edcfe84..17457b759 100644
--- a/src/plugin/panel/applet-info.c
+++ b/src/plugin/panel/applet-info.c
@@ -10,7 +10,6 @@
  */
 
 #include "applet-info.h"
-#include <libpeas/peas.h>
 
 enum {
 	PROP_ICON = 1,
diff --git a/src/plugin/panel/applet-info.h b/src/plugin/panel/applet-info.h
index 70e3b8100..bea3cdbaa 100644
--- a/src/plugin/panel/applet-info.h
+++ b/src/plugin/panel/applet-info.h
@@ -13,9 +13,8 @@
 
 #include <glib-object.h>
 #include <gtk/gtk.h>
-#include <libpeas/peas.h>
+#include <libpeas-2/libpeas.h>
 
-#include "applet-info.h"
 #include "applet.h"
 
 G_BEGIN_DECLS
diff --git a/src/plugin/panel/meson.build b/src/plugin/panel/meson.build
index 1c602ccb4..ae607e185 100644
--- a/src/plugin/panel/meson.build
+++ b/src/plugin/panel/meson.build
@@ -74,7 +74,7 @@ libpanelplugin_gir = gnome.generate_gir(
         'GObject-2.0',
         'Gio-2.0',
         'Gtk-3.0',
-        'Peas-1.0',
+        'Peas-2',
     ],
     symbol_prefix: 'budgie',
     identifier_prefix: 'Budgie',
@@ -91,7 +91,7 @@ libpanelplugin_vapi = gnome.generate_vapi(
     packages: [
         'gtk+-3.0',
         'gio-unix-2.0',
-        'libpeas-1.0',
+        'libpeas-2',
     ],
     install: true,
 )
@@ -106,7 +106,7 @@ pkgconfig.generate(
     libraries: ['-L${libdir}', '-lbudgie-plugin'],
     requires: [
         'gtk+-3.0 >= 3.22.0',
-        'libpeas-1.0 >= 1.8.0',
+        'libpeas-2 >= 1.99.0',
         'glib-2.0 >= 2.46.0',
         'gio-unix-2.0 >= 2.46.0',
     ],
diff --git a/src/raven/meson.build b/src/raven/meson.build
index 6f46a08f7..bae5a71bf 100644
--- a/src/raven/meson.build
+++ b/src/raven/meson.build
@@ -39,6 +39,7 @@ libraven_deps = [
     libravenplugin_vapi,
     libpanelplugin_vapi,
     dep_giounix,
+    dep_gobject_introspection,
     dep_gtk3,
     dep_libuuid,
     dep_peas,
diff --git a/src/raven/plugin_manager.vala b/src/raven/plugin_manager.vala
index 01f325539..1ff139c9a 100644
--- a/src/raven/plugin_manager.vala
+++ b/src/raven/plugin_manager.vala
@@ -38,13 +38,12 @@ namespace Budgie {
 		*/
 		public void setup_plugins() {
 			engine = new Peas.Engine();
-			engine.enable_loader("python3");
+			engine.enable_loader("python");
 
 			/* Ensure libpeas doesn't freak the hell out for Python plugins */
 			try {
 				var repo = GI.Repository.get_default();
-				repo.require("Peas", "1.0", 0);
-				repo.require("PeasGtk", "1.0", 0);
+				repo.require("Peas", "2", 0);
 				repo.require("BudgieRaven", "1.0", 0);
 			} catch (Error e) {
 				message("Error loading typelibs: %s", e.message);
@@ -64,7 +63,7 @@ namespace Budgie {
 
 			engine.rescan_plugins();
 
-			plugin_set = new Peas.ExtensionSet(engine, typeof(Budgie.RavenPlugin));
+			plugin_set = new Peas.ExtensionSet.with_properties(engine, typeof(Budgie.RavenPlugin), {}, {});
 			plugin_set.extension_added.connect(on_plugin_loaded);
 		}
 
@@ -107,7 +106,7 @@ namespace Budgie {
 			if (instance_settings_schema_name.split(".").length < 3) return RavenWidgetCreationResult.INVALID_MODULE_NAME;
 
 			if (!is_plugin_loaded(module_name)) {
-				if (!engine.try_load_plugin(plugin_info)) return RavenWidgetCreationResult.PLUGIN_LOAD_FAILED;
+				engine.load_plugin(plugin_info);
 			}
 			var extension = plugin_set.get_extension(plugin_info);
 			var plugin = extension as Budgie.RavenPlugin;
@@ -139,8 +138,12 @@ namespace Budgie {
 
 		public List<Peas.PluginInfo?> get_all_plugins() {
 			List<Peas.PluginInfo?> ret = new List<Peas.PluginInfo?>();
-			foreach (unowned Peas.PluginInfo? info in this.engine.get_plugin_list()) {
-				ret.append(info);
+			var list = this.engine.get_n_items();
+			for (int i=0; i < list; i++) {
+				Peas.PluginInfo? info = (Peas.PluginInfo)this.engine.get_item(i);
+				if (info != null) {
+					ret.append(info);
+				}
 			}
 			return ret;
 		}
@@ -156,7 +159,7 @@ namespace Budgie {
 				warning("budgie_panel_modprobe called for non existent module: %s", module_name);
 				return;
 			}
-			this.engine.try_load_plugin(i);
+			this.engine.load_plugin(i);
 		}
 
 		private static string module_name_to_schema_name(string module_name) {

From 7b3d7501781d233422b16fc1a003b8316ffc50a6 Mon Sep 17 00:00:00 2001
From: David Mohammed <fossfreedom@ubuntu.com>
Date: Sat, 22 Mar 2025 21:14:38 +0000
Subject: [PATCH 02/11] Cleanup vapi pkg usage

---
 src/appindexer/meson.build                     | 2 --
 src/appsys/meson.build                         | 6 ------
 src/daemon/meson.build                         | 6 +-----
 src/dialogs/polkit/meson.build                 | 2 --
 src/dialogs/run/meson.build                    | 1 -
 src/lib/meson.build                            | 5 -----
 src/libsession/meson.build                     | 3 ---
 src/panel/applets/budgie-menu/meson.build      | 3 ---
 src/panel/applets/caffeine/meson.build         | 2 --
 src/panel/applets/clock/meson.build            | 4 ----
 src/panel/applets/icon-tasklist/meson.build    | 5 -----
 src/panel/applets/keyboard-layout/meson.build  | 4 ----
 src/panel/applets/lock-keys/meson.build        | 2 --
 src/panel/applets/night-light/meson.build      | 3 ---
 src/panel/applets/notifications/meson.build    | 4 ----
 src/panel/applets/places-indicator/meson.build | 2 --
 src/panel/applets/raven-trigger/meson.build    | 4 ----
 src/panel/applets/separator/meson.build        | 4 ----
 src/panel/applets/show-desktop/meson.build     | 3 ---
 src/panel/applets/spacer/meson.build           | 2 --
 src/panel/applets/status/meson.build           | 4 ----
 src/panel/applets/tasklist/meson.build         | 5 -----
 src/panel/applets/tray/meson.build             | 3 ---
 src/panel/applets/user-indicator/meson.build   | 2 --
 src/panel/applets/workspaces/meson.build       | 4 ----
 src/panel/meson.build                          | 4 ----
 src/raven/meson.build                          | 4 ----
 src/raven/widgets/calendar/meson.build         | 4 ----
 src/raven/widgets/media-controls/meson.build   | 4 ----
 src/raven/widgets/sound-input/meson.build      | 2 --
 src/raven/widgets/sound-output/meson.build     | 2 --
 src/raven/widgets/usage-monitor/meson.build    | 4 ----
 32 files changed, 1 insertion(+), 108 deletions(-)

diff --git a/src/appindexer/meson.build b/src/appindexer/meson.build
index ed0d111d4..10d5cddc7 100644
--- a/src/appindexer/meson.build
+++ b/src/appindexer/meson.build
@@ -18,8 +18,6 @@ libappindexer = shared_library(
         link_libfuzzer,
     ],
     vala_args: [
-        '--pkg', 'gtk+-3.0',
-        '--pkg', 'gio-unix-2.0',
         '--vapidir', join_paths(meson.source_root(), 'vapi'),
         join_paths(meson.source_root(), 'src', 'appindexer', 'fuzzer', 'fuzzer-1.0.vapi'),
     ],
diff --git a/src/appsys/meson.build b/src/appsys/meson.build
index 012b7f7df..5f751b9c6 100644
--- a/src/appsys/meson.build
+++ b/src/appsys/meson.build
@@ -14,12 +14,6 @@ libappsys = static_library(
         dep_wnck,
         link_libconfig,
     ],
-    vala_args: [
-        '--pkg', 'gio-unix-2.0',
-        '--pkg', 'gtk+-3.0',
-        '--pkg', 'gdk-x11-3.0',
-        '--pkg', 'libwnck-3.0',
-    ],
     c_args: [
         '-DWNCK_I_KNOW_THIS_IS_UNSTABLE',
     ],
diff --git a/src/daemon/meson.build b/src/daemon/meson.build
index 7d87a0e12..13a0d16af 100644
--- a/src/daemon/meson.build
+++ b/src/daemon/meson.build
@@ -86,11 +86,7 @@ executable(
         '--vapidir', top_vapidir,
         '--pkg', 'theme',
         '--pkg', 'budgie-config',
-        '--pkg', 'gio-unix-2.0',
-        '--pkg', 'gtk+-3.0',
-        '--pkg', 'gdk-x11-3.0',
-        '--pkg', 'libwnck-3.0',
-        '--pkg', 'libxfce4windowing-0',
+        '--pkg', 'gvc-1.0',
         # Make gresource work
         '--target-glib=2.38',
         '--gresources=' + gresource,
diff --git a/src/dialogs/polkit/meson.build b/src/dialogs/polkit/meson.build
index 92ca59961..fccedce73 100644
--- a/src/dialogs/polkit/meson.build
+++ b/src/dialogs/polkit/meson.build
@@ -56,9 +56,7 @@ executable(
         '--vapidir', dir_libconfig,
         '--vapidir', pkvapi,
         '--pkg', 'theme',
-        '--pkg', 'gio-unix-2.0',
         '--pkg', 'budgie-config',
-        '--pkg', 'gtk+-3.0',
         '--pkg', 'polkit-gobject-1',
         '--pkg', 'polkit-agent-1',
         '--pkg', 'posix',
diff --git a/src/dialogs/run/meson.build b/src/dialogs/run/meson.build
index 9e66eaf79..f9a6a26b9 100644
--- a/src/dialogs/run/meson.build
+++ b/src/dialogs/run/meson.build
@@ -20,7 +20,6 @@ executable(
         '--vapidir', dir_libtheme,
         '--vapidir', dir_libconfig,
         '--pkg', 'theme',
-        '--pkg', 'gio-unix-2.0',
         '--pkg', 'budgie-config',
     ],
     install: true,
diff --git a/src/lib/meson.build b/src/lib/meson.build
index c834a7f96..62de718b1 100644
--- a/src/lib/meson.build
+++ b/src/lib/meson.build
@@ -19,11 +19,6 @@ libbudgieprivate = shared_library(
         meson.get_compiler('c').find_library('m', required: false),
         link_libpanelplugin,
     ],
-    vala_args: [
-        '--pkg', 'gio-unix-2.0',
-        '--pkg', 'gtk+-3.0',
-        '--pkg', 'libpeas-1.0',
-    ],
     version: '0.0.0',
     install: true,
 )
diff --git a/src/libsession/meson.build b/src/libsession/meson.build
index ddbc7ea0f..4bd4b6d2b 100644
--- a/src/libsession/meson.build
+++ b/src/libsession/meson.build
@@ -11,9 +11,6 @@ libsession = static_library(
         dep_glib,
         dep_giounix
     ],
-    vala_args: [
-        '--pkg', 'gio-unix-2.0',
-    ],
 )
 
 link_libsession = declare_dependency(
diff --git a/src/panel/applets/budgie-menu/meson.build b/src/panel/applets/budgie-menu/meson.build
index cf3264db1..9b9a3965a 100644
--- a/src/panel/applets/budgie-menu/meson.build
+++ b/src/panel/applets/budgie-menu/meson.build
@@ -57,9 +57,6 @@ shared_library(
     applet_budgiemenu_sources,
     dependencies: applet_budgiemenu_deps,
     vala_args: [
-        '--pkg', 'libpeas-1.0',
-        '--pkg', 'gtk+-3.0',
-        '--pkg', 'gio-unix-2.0',
         '--vapidir', join_paths(meson.source_root(), 'vapi'),
         # Make gresource work
         '--target-glib=2.38',
diff --git a/src/panel/applets/caffeine/meson.build b/src/panel/applets/caffeine/meson.build
index ed3dd3ef4..94b1de5cf 100644
--- a/src/panel/applets/caffeine/meson.build
+++ b/src/panel/applets/caffeine/meson.build
@@ -38,8 +38,6 @@ shared_library(
     applet_caffeine_sources,
     dependencies: applet_caffeine_deps,
     vala_args: [
-        '--pkg', 'libpeas-1.0',
-        '--pkg', 'gtk+-3.0',
         # Make gresource work
         '--target-glib=2.38',
         '--gresources=' + gresource,
diff --git a/src/panel/applets/clock/meson.build b/src/panel/applets/clock/meson.build
index e930a2718..1da78e88d 100644
--- a/src/panel/applets/clock/meson.build
+++ b/src/panel/applets/clock/meson.build
@@ -48,10 +48,6 @@ shared_library(
         lib_applet_clock_resources,
     ],
     vala_args: [
-        '--pkg', 'gtk+-3.0',
-        '--pkg', 'glib-2.0',
-        '--pkg', 'gio-unix-2.0',
-        '--pkg', 'libpeas-1.0',
         # Make gresource work
         '--target-glib=2.38',
         '--gresources=' + gresource,
diff --git a/src/panel/applets/icon-tasklist/meson.build b/src/panel/applets/icon-tasklist/meson.build
index dd53a5cbf..9a205d529 100644
--- a/src/panel/applets/icon-tasklist/meson.build
+++ b/src/panel/applets/icon-tasklist/meson.build
@@ -58,11 +58,6 @@ shared_library(
         lib_applet_icontasklist_resources,
     ],
     vala_args: [
-        '--pkg', 'libpeas-1.0',
-        '--pkg', 'gtk+-3.0',
-        '--pkg', 'gdk-x11-3.0',
-        '--pkg', 'gio-unix-2.0',
-        '--pkg', 'libwnck-3.0',
         '--vapidir', dir_libappsys,
         '--vapidir', dir_libabomination,
         # Make gresource work
diff --git a/src/panel/applets/keyboard-layout/meson.build b/src/panel/applets/keyboard-layout/meson.build
index 761359a18..720fe5cf3 100644
--- a/src/panel/applets/keyboard-layout/meson.build
+++ b/src/panel/applets/keyboard-layout/meson.build
@@ -27,10 +27,6 @@ shared_library(
     applet_keyboardlayout_sources,
     dependencies: applet_keyboardlayout_deps,
     vala_args: [
-        '--pkg', 'libpeas-1.0',
-        '--pkg', 'gtk+-3.0',
-        '--pkg', 'ibus-1.0',
-        '--pkg', 'gnome-desktop-3.0',
         '--vapidir', join_paths(meson.source_root(), 'vapi'),
     ],
     c_args: [
diff --git a/src/panel/applets/lock-keys/meson.build b/src/panel/applets/lock-keys/meson.build
index f461c49fc..82dd7b462 100644
--- a/src/panel/applets/lock-keys/meson.build
+++ b/src/panel/applets/lock-keys/meson.build
@@ -25,8 +25,6 @@ shared_library(
     applet_lockkeys_sources,
     dependencies: applet_lockkeys_deps,
     vala_args: [
-        '--pkg', 'libpeas-1.0',
-        '--pkg', 'gtk+-3.0',
         '--vapidir', dir_libpanelplugin,
     ],
     install: true,
diff --git a/src/panel/applets/night-light/meson.build b/src/panel/applets/night-light/meson.build
index c4fdf8fdd..fc463d636 100644
--- a/src/panel/applets/night-light/meson.build
+++ b/src/panel/applets/night-light/meson.build
@@ -48,9 +48,6 @@ shared_library(
         lib_applet_nightlight_resources,
     ],
     vala_args: [
-        '--pkg', 'libpeas-1.0',
-        '--pkg', 'gtk+-3.0',
-        '--pkg', 'gio-unix-2.0',
         # Make gresource work
         '--target-glib=2.38',
         '--gresources=' + gresource
diff --git a/src/panel/applets/notifications/meson.build b/src/panel/applets/notifications/meson.build
index dd1f50111..e4bfe370e 100644
--- a/src/panel/applets/notifications/meson.build
+++ b/src/panel/applets/notifications/meson.build
@@ -24,10 +24,6 @@ shared_library(
     'notificationsapplet',
     applet_notifications_sources,
     dependencies: applet_notifications_deps,
-    vala_args: [
-        '--pkg', 'libpeas-1.0',
-        '--pkg', 'gtk+-3.0',
-    ],
     install: true,
     install_dir: applet_notifications_dir,
 )
diff --git a/src/panel/applets/places-indicator/meson.build b/src/panel/applets/places-indicator/meson.build
index 133787f9c..3f21ec4dd 100644
--- a/src/panel/applets/places-indicator/meson.build
+++ b/src/panel/applets/places-indicator/meson.build
@@ -54,8 +54,6 @@ shared_library(
         lib_applet_placesindicator_resources,
     ],
     vala_args: [
-        '--pkg', 'libpeas-1.0',
-        '--pkg', 'gtk+-3.0',
         # Make gresource work
         '--target-glib=2.38',
         '--gresources=' + gresource,
diff --git a/src/panel/applets/raven-trigger/meson.build b/src/panel/applets/raven-trigger/meson.build
index 76c74cec2..09f0ddc80 100644
--- a/src/panel/applets/raven-trigger/meson.build
+++ b/src/panel/applets/raven-trigger/meson.build
@@ -24,10 +24,6 @@ shared_library(
     'raventriggerapplet',
     applet_raventrigger_sources,
     dependencies: applet_raventrigger_deps,
-    vala_args: [
-        '--pkg', 'libpeas-1.0',
-        '--pkg', 'gtk+-3.0',
-    ],
     install: true,
     install_dir: applet_raventrigger_dir,
 )
diff --git a/src/panel/applets/separator/meson.build b/src/panel/applets/separator/meson.build
index 46b59e4b8..b4a2c7bac 100644
--- a/src/panel/applets/separator/meson.build
+++ b/src/panel/applets/separator/meson.build
@@ -24,10 +24,6 @@ shared_library(
     'separatorapplet',
     applet_separator_sources,
     dependencies: applet_separator_deps,
-    vala_args: [
-        '--pkg', 'libpeas-1.0',
-        '--pkg', 'gtk+-3.0',
-    ],
     install: true,
     install_dir: applet_separator_dir,
 )
diff --git a/src/panel/applets/show-desktop/meson.build b/src/panel/applets/show-desktop/meson.build
index bfad533f5..998beed23 100644
--- a/src/panel/applets/show-desktop/meson.build
+++ b/src/panel/applets/show-desktop/meson.build
@@ -27,9 +27,6 @@ shared_library(
     dependencies: applet_showdesktop_deps,
     vala_args: [
         '--vapidir', top_vapidir,
-        '--pkg', 'libpeas-1.0',
-        '--pkg', 'gtk+-3.0',
-        '--pkg', 'libxfce4windowing-0',
     ],
     install: true,
     install_dir: applet_showdesktop_dir,
diff --git a/src/panel/applets/spacer/meson.build b/src/panel/applets/spacer/meson.build
index 23da7b034..e8f3c3ee3 100644
--- a/src/panel/applets/spacer/meson.build
+++ b/src/panel/applets/spacer/meson.build
@@ -36,8 +36,6 @@ shared_library(
     applet_spacer_sources,
     dependencies: applet_spacer_deps,
     vala_args: [
-        '--pkg', 'libpeas-1.0',
-        '--pkg', 'gtk+-3.0',
         # Make gresource work
         '--target-glib=2.38',
         '--gresources=' + gresource,
diff --git a/src/panel/applets/status/meson.build b/src/panel/applets/status/meson.build
index 403217182..ebfc82b94 100644
--- a/src/panel/applets/status/meson.build
+++ b/src/panel/applets/status/meson.build
@@ -55,11 +55,7 @@ shared_library(
         '-lm'
     ],
     vala_args: [
-        '--pkg', 'libpeas-1.0',
-        '--pkg', 'gtk+-3.0',
-        '--pkg', 'accountsservice',
         '--pkg', 'gvc-1.0',
-        '--pkg', 'gio-unix-2.0',
         '--vapidir', join_paths(meson.source_root(), 'vapi'),
     ],
     install: true,
diff --git a/src/panel/applets/tasklist/meson.build b/src/panel/applets/tasklist/meson.build
index f90d7f38d..105196eb0 100644
--- a/src/panel/applets/tasklist/meson.build
+++ b/src/panel/applets/tasklist/meson.build
@@ -25,11 +25,6 @@ shared_library(
     'tasklistapplet',
     applet_tasklist_sources,
     dependencies: applet_tasklist_deps,
-    vala_args: [
-        '--pkg', 'libpeas-1.0',
-        '--pkg', 'gtk+-3.0',
-        '--pkg', 'libwnck-3.0',
-    ],
     c_args: [
         '-DWNCK_I_KNOW_THIS_IS_UNSTABLE',
     ],
diff --git a/src/panel/applets/tray/meson.build b/src/panel/applets/tray/meson.build
index 300c70a22..b17fdd15e 100644
--- a/src/panel/applets/tray/meson.build
+++ b/src/panel/applets/tray/meson.build
@@ -36,9 +36,6 @@ shared_library(
     'trayapplet',
     applet_tray_sources,
     dependencies: applet_tray_deps,
-    vala_args: [
-        '--pkg', 'libpeas-1.0',
-    ],
     install: true,
     install_dir: applet_tray_dir,
 )
diff --git a/src/panel/applets/user-indicator/meson.build b/src/panel/applets/user-indicator/meson.build
index 4b03f8cb5..f88573afb 100644
--- a/src/panel/applets/user-indicator/meson.build
+++ b/src/panel/applets/user-indicator/meson.build
@@ -26,8 +26,6 @@ shared_library(
     applet_userindicator_sources,
     dependencies: applet_userindicator_deps,
     vala_args: [
-        '--pkg', 'libpeas-1.0',
-        '--pkg', 'gtk+-3.0',
         '--vapidir', join_paths(meson.source_root(), 'vapi'),
     ],
     install: true,
diff --git a/src/panel/applets/workspaces/meson.build b/src/panel/applets/workspaces/meson.build
index ac82790ff..47a3285d2 100644
--- a/src/panel/applets/workspaces/meson.build
+++ b/src/panel/applets/workspaces/meson.build
@@ -42,10 +42,6 @@ shared_library(
     dependencies: applet_workspaces_deps,
     vala_args: [
         '--vapidir', top_vapidir,
-        '--pkg', 'gio-unix-2.0',
-        '--pkg', 'libpeas-1.0',
-        '--pkg', 'gtk+-3.0',
-        '--pkg', 'libxfce4windowing-0',
         # Make gresource work
         '--target-glib=2.38',
         '--gresources=' + gresource,
diff --git a/src/panel/meson.build b/src/panel/meson.build
index 410644bf4..2dd360e08 100644
--- a/src/panel/meson.build
+++ b/src/panel/meson.build
@@ -70,10 +70,6 @@ budgie_panel_vala_args = [
         '--pkg', 'theme',
         '--pkg', 'budgie-config',
         '--pkg', 'gvc-1.0',
-        '--pkg', 'libpeas-1.0',
-        '--pkg', 'gtk+-3.0',
-        '--pkg', 'gdk-x11-3.0',
-        '--pkg', 'gio-unix-2.0',
         # Make gresource work
         '--target-glib=2.38',
         '--gresources=' + gresource,
diff --git a/src/raven/meson.build b/src/raven/meson.build
index bae5a71bf..e9be4723d 100644
--- a/src/raven/meson.build
+++ b/src/raven/meson.build
@@ -65,10 +65,6 @@ libraven = shared_library(
         '--pkg', 'theme',
         '--pkg', 'budgie-config',
         '--pkg', 'gvc-1.0',
-        '--pkg', 'libpeas-1.0',
-        '--pkg', 'gtk+-3.0',
-        '--pkg', 'gdk-x11-3.0',
-        '--pkg', 'gio-unix-2.0',
         # Make gresource work
         '--target-glib=2.38',
         '--gresources=' + gresource,
diff --git a/src/raven/widgets/calendar/meson.build b/src/raven/widgets/calendar/meson.build
index 74e4691ec..1fb3da020 100644
--- a/src/raven/widgets/calendar/meson.build
+++ b/src/raven/widgets/calendar/meson.build
@@ -33,10 +33,6 @@ shared_library(
     'org.buddiesofbudgie.budgie-desktop.raven.widget.Calendar',
     raven_plugin_calendar_sources,
     dependencies: raven_plugin_calendar_deps,
-    vala_args: [
-        '--pkg', 'libpeas-1.0',
-        '--pkg', 'gtk+-3.0',
-    ],
     install: true,
     install_dir: raven_plugin_calendar_dir,
 )
diff --git a/src/raven/widgets/media-controls/meson.build b/src/raven/widgets/media-controls/meson.build
index 9a8e33d11..21798c1f5 100644
--- a/src/raven/widgets/media-controls/meson.build
+++ b/src/raven/widgets/media-controls/meson.build
@@ -24,10 +24,6 @@ shared_library(
     'org.buddiesofbudgie.budgie-desktop.raven.widget.MediaControls',
     raven_plugin_mediacontrols_sources,
     dependencies: raven_plugin_mediacontrols_deps,
-    vala_args: [
-        '--pkg', 'libpeas-1.0',
-        '--pkg', 'gtk+-3.0',
-    ],
     install: true,
     install_dir: raven_plugin_mediacontrols_dir,
 )
diff --git a/src/raven/widgets/sound-input/meson.build b/src/raven/widgets/sound-input/meson.build
index 5cd6d3fdb..a70f2e98f 100644
--- a/src/raven/widgets/sound-input/meson.build
+++ b/src/raven/widgets/sound-input/meson.build
@@ -40,8 +40,6 @@ shared_library(
     dependencies: raven_plugin_sound_input_deps,
     vala_args: [
         '--vapidir', top_vapidir,
-        '--pkg', 'libpeas-1.0',
-        '--pkg', 'gtk+-3.0',
         '--pkg', 'gvc-1.0',
     ],
     install: true,
diff --git a/src/raven/widgets/sound-output/meson.build b/src/raven/widgets/sound-output/meson.build
index 3e828e6de..451b67805 100644
--- a/src/raven/widgets/sound-output/meson.build
+++ b/src/raven/widgets/sound-output/meson.build
@@ -41,8 +41,6 @@ shared_library(
     dependencies: raven_plugin_sound_output_deps,
     vala_args: [
         '--vapidir', top_vapidir,
-        '--pkg', 'libpeas-1.0',
-        '--pkg', 'gtk+-3.0',
         '--pkg', 'gvc-1.0',
     ],
     install: true,
diff --git a/src/raven/widgets/usage-monitor/meson.build b/src/raven/widgets/usage-monitor/meson.build
index 2bdac6c61..0adb45fa4 100644
--- a/src/raven/widgets/usage-monitor/meson.build
+++ b/src/raven/widgets/usage-monitor/meson.build
@@ -33,10 +33,6 @@ shared_library(
     'org.buddiesofbudgie.budgie-desktop.raven.widget.UsageMonitor',
     raven_plugin_usage_monitor_sources,
     dependencies: raven_plugin_usage_monitor_deps,
-    vala_args: [
-        '--pkg', 'libpeas-1.0',
-        '--pkg', 'gtk+-3.0',
-    ],
     install: true,
     install_dir: raven_plugin_usage_monitor_dir,
 )

From 8d64a057eabea3801b62481216404539d96410f4 Mon Sep 17 00:00:00 2001
From: Joshua Strobl <me@joshuastrobl.com>
Date: Wed, 10 Sep 2025 21:58:53 +0300
Subject: [PATCH 03/11] fix some porting issues

---
 src/panel/panel.vala          | 20 +++++++++++---------
 src/panel/plugin_manager.vala |  6 +++---
 src/plugin/raven/meson.build  |  6 +++---
 src/raven/meson.build         |  2 ++
 4 files changed, 19 insertions(+), 15 deletions(-)

diff --git a/src/panel/panel.vala b/src/panel/panel.vala
index 06be34325..9dbcb483b 100644
--- a/src/panel/panel.vala
+++ b/src/panel/panel.vala
@@ -477,7 +477,7 @@ namespace Budgie {
 					Budgie.AppletInfo? info = null;
 					string? uname = null;
 					try {
-						info = this.plugin_manager.load_applet_instance(uuid, null, out uname);
+						info = this.plugin_manager.load_applet_instance(uuid, out uname);
 						add_applet(info);
 					} catch (Error e) {
 						critical("Failed to load applet when we know it exists: %s", uname);
@@ -496,7 +496,7 @@ namespace Budgie {
 				while (iter.next(out uuid, null)) {
 					Budgie.AppletInfo? info = null;
 					try {
-						info = this.plugin_manager.create_applet(name, uuid);
+						info = this.plugin_manager.create_new_applet(name, uuid);
 						add_applet(info);
 					} catch (Error e) {
 						critical("Failed to load applet when we know it exists");
@@ -536,7 +536,7 @@ namespace Budgie {
 					Budgie.AppletInfo? info = null;
 
 					try {
-						info = this.plugin_manager.load_applet_instance(applets[i], null, out name);
+						info = this.plugin_manager.load_applet_instance(applets[i], out name);
 					} catch (Error e) {
 						if (name == null) {
 							unowned List<string?> g = expected_uuids.find_custom(applets[i], strcmp);
@@ -900,7 +900,7 @@ namespace Budgie {
 			string? uuid = null;
 			unowned HashTable<string,string>? table = null;
 
-			if (!this.plugin_manager.is_plugin_valid(plugin_name)) {{
+			if (!this.plugin_manager.is_extension_valid(plugin_name)) {
 				warning("Not loading invalid plugin: %s", plugin_name);
 				return;
 			}
@@ -910,7 +910,7 @@ namespace Budgie {
 				uuid = initial_uuid;
 			}
 
-			if (!this.plugin_manager.is_plugin_loaded(plugin_name)) {
+			if (!this.plugin_manager.is_extension_loaded(plugin_name)) {
 				/* Request a load of the new guy */
 				table = creating.lookup(plugin_name);
 				if (table != null) {
@@ -928,7 +928,7 @@ namespace Budgie {
 			}
 			/* Already exists */
 			try {
-				Budgie.AppletInfo? info = this.plugin_manager.create_applet(plugin_name, uuid);
+				Budgie.AppletInfo? info = this.plugin_manager.create_new_applet(plugin_name, uuid);
 				this.add_applet(info);
 			} catch (Error e) {
 				critical("Failed to load applet when we know it exists");
@@ -940,12 +940,12 @@ namespace Budgie {
 			string? rname = null;
 			unowned HashTable<string,string>? table = null;
 
-			if (!this.plugin_manager.is_plugin_valid(plugin_name)) {
+			if (!this.plugin_manager.is_extension_valid(plugin_name)) {
 				warning("Not adding invalid plugin: %s %s", plugin_name, uuid);
 				return null;
 			}
 
-			if (!this.plugin_manager.is_plugin_loaded(plugin_name)) {
+			if (!this.plugin_manager.is_extension_loaded(plugin_name)) {
 				/* Request a load of the new guy */
 				table = pending.lookup(plugin_name);
 				if (table != null) {
@@ -964,11 +964,13 @@ namespace Budgie {
 
 			/* Already exists */
 			Budgie.AppletInfo? info = null;
+
 			try {
-				info = this.plugin_manager.load_applet_instance(uuid, null, out rname);
+				info = this.plugin_manager.load_applet_instance(uuid, out rname);
 			} catch (Error e) {
 				critical("Failed to load applet when we know it exists");
 			}
+
 			return info;
 		}
 
diff --git a/src/panel/plugin_manager.vala b/src/panel/plugin_manager.vala
index 28d1dd28a..98674e2a4 100644
--- a/src/panel/plugin_manager.vala
+++ b/src/panel/plugin_manager.vala
@@ -63,7 +63,7 @@ namespace Budgie {
 
 			extensions.extension_added.connect(on_extension_added);
 			engine.load_plugin.connect_after((i) => {
-				Peas.Extension? e = extensions.get_extension(i);
+				var e = extensions.get_extension(i);
 				if (e == null) {
 					critical("Failed to find extension for: %s", i.get_name());
 					return;
@@ -133,7 +133,7 @@ namespace Budgie {
 		/**
 		* PeasEngine.get_plugin_info == completely broken
 		*/
-		private unowned Peas.PluginInfo? get_plugin_info(string name) {
+		private Peas.PluginInfo? get_plugin_info(string name) {
 			var list = this.engine.get_n_items();
 			for (int i=0; i < list; i++) {
 				Peas.PluginInfo? info = (Peas.PluginInfo)this.engine.get_item(i);
@@ -175,7 +175,7 @@ namespace Budgie {
 					name = null;
 					return null;
 				}
-				engine.try_load_plugin(pinfo);
+				engine.load_plugin(pinfo);
 				name = pname;
 				return null;
 			}
diff --git a/src/plugin/raven/meson.build b/src/plugin/raven/meson.build
index 04a57823b..82fa87c02 100644
--- a/src/plugin/raven/meson.build
+++ b/src/plugin/raven/meson.build
@@ -67,7 +67,7 @@ libravenplugin_gir = gnome.generate_gir(
         'GObject-2.0',
         'Gio-2.0',
         'Gtk-3.0',
-        'Peas-1.0',
+        'Peas-2',
     ],
     symbol_prefix: 'budgie',
     identifier_prefix: 'Budgie',
@@ -81,7 +81,7 @@ libravenplugin_vapi = gnome.generate_vapi(
     packages: [
         'gtk+-3.0',
         'gio-unix-2.0',
-        'libpeas-1.0',
+        'libpeas-2',
     ],
     install: true,
 )
@@ -96,7 +96,7 @@ pkgconfig.generate(
     libraries: ['-L${libdir}', '-lbudgie-raven-plugin'],
     requires: [
         'gtk+-3.0 >= 3.22.0',
-        'libpeas-1.0 >= 1.8.0',
+        'libpeas-2 >= 1.99.0',
         'glib-2.0 >= 2.46.0',
         'gio-unix-2.0 >= 2.46.0',
     ],
diff --git a/src/raven/meson.build b/src/raven/meson.build
index e9be4723d..1e6712081 100644
--- a/src/raven/meson.build
+++ b/src/raven/meson.build
@@ -41,6 +41,7 @@ libraven_deps = [
     dep_giounix,
     dep_gobject_introspection,
     dep_gtk3,
+    dep_gdkx11,
     dep_libuuid,
     dep_peas,
     link_libconfig,
@@ -65,6 +66,7 @@ libraven = shared_library(
         '--pkg', 'theme',
         '--pkg', 'budgie-config',
         '--pkg', 'gvc-1.0',
+        '--pkg', 'gdk-x11-3.0',
         # Make gresource work
         '--target-glib=2.38',
         '--gresources=' + gresource,

From b9aac1af8cb30fc17ff4f54dc4022cc997af76ac Mon Sep 17 00:00:00 2001
From: Joshua Strobl <me@joshuastrobl.com>
Date: Sat, 13 Sep 2025 16:59:46 +0300
Subject: [PATCH 04/11] feat: port over Evan's plugin manager work, align rest
 of code to 10.9.x branch

---
 src/panel/manager.vala               |  16 -
 src/panel/meson.build                |  16 +-
 src/panel/panel.vala                 |  23 +-
 src/panel/plugin/meson.build         |  32 ++
 src/panel/plugin/plugin-manager.c    | 472 +++++++++++++++++++++++++++
 src/panel/plugin/plugin-manager.h    |  66 ++++
 src/panel/plugin/plugin-manager.vapi |  48 +++
 7 files changed, 639 insertions(+), 34 deletions(-)
 create mode 100644 src/panel/plugin/meson.build
 create mode 100644 src/panel/plugin/plugin-manager.c
 create mode 100644 src/panel/plugin/plugin-manager.h
 create mode 100644 src/panel/plugin/plugin-manager.vapi

diff --git a/src/panel/manager.vala b/src/panel/manager.vala
index 22837a122..cbcd34835 100644
--- a/src/panel/manager.vala
+++ b/src/panel/manager.vala
@@ -49,16 +49,6 @@ namespace Budgie {
 	public const string TOPLEVEL_PREFIX = "/com/solus-project/budgie-panel/panels";
 
 
-	/**
-	* Relocatable schema ID for applets
-	*/
-	public const string APPLET_SCHEMA = "com.solus-project.budgie-panel.applet";
-
-	/**
-	* Prefix for all relocatable applet settings
-	*/
-	public const string APPLET_PREFIX = "/com/solus-project/budgie-panel/applets";
-
 	/**
 	* Schema ID for Raven settings
 	*/
@@ -659,12 +649,6 @@ namespace Budgie {
 				return;
 			}
 
-			/* Manual configuration from user met the expected migration path. Proceed as normal. */
-			if (panel_plugin_manager.migrate_load_requirements_met) {
-				message("Budgie Migration skipped due to user meeting migration requirements");
-				return;
-			}
-
 			message("Budgie Migration initiated");
 
 			string? key = null;
diff --git a/src/panel/meson.build b/src/panel/meson.build
index 2dd360e08..dc5e0f006 100644
--- a/src/panel/meson.build
+++ b/src/panel/meson.build
@@ -1,5 +1,7 @@
 # Provides budgie's main panel component
 
+subdir('plugin')
+
 custom_target('desktop-file-panel',
     input : 'budgie-panel.desktop.in',
     output : 'org.buddiesofbudgie.BudgiePanel.desktop',
@@ -21,7 +23,6 @@ panel_sources = [
     'main.vala',
     'manager.vala',
     'panel.vala',
-    'plugin_manager.vala',
     'uuid.vala',
     'settings/settings_autostart.vala',
     'settings/settings_desktop.vala',
@@ -50,9 +51,11 @@ panel_deps = [
     dep_peas,
     dep_libuuid,
     dep_wnck,
+    dep_xfce4windowing,
     link_libconfig,
     link_libsession,
     link_libbudgieprivate,
+    link_libpanelpluginmanager,
     link_libtheme,
     link_libpanelplugin,
     link_libravenplugin,
@@ -61,7 +64,7 @@ panel_deps = [
     gvc.get_variable('libgvc_dep'),
 ]
 
-top_vapidir = join_paths(meson.source_root(), 'vapi')
+top_vapidir = join_paths(meson.project_source_root(), 'vapi')
 
 budgie_panel_vala_args = [
         '--vapidir', dir_libtheme,
@@ -73,17 +76,16 @@ budgie_panel_vala_args = [
         # Make gresource work
         '--target-glib=2.38',
         '--gresources=' + gresource,
-]
-
-budgie_panel_c_args = [
-    '-DWNCK_I_KNOW_THIS_IS_UNSTABLE'
+        join_paths(meson.project_source_root(), 'src', 'panel', 'plugin', 'plugin-manager.vapi'),
 ]
 
 executable(
     'budgie-panel', panel_sources,
     dependencies: panel_deps,
     vala_args: budgie_panel_vala_args,
-    c_args: budgie_panel_c_args,
+    c_args: [
+      '-DWNCK_I_KNOW_THIS_IS_UNSTABLE',
+    ],
     install: true,
 )
 
diff --git a/src/panel/panel.vala b/src/panel/panel.vala
index 9dbcb483b..30a884c2b 100644
--- a/src/panel/panel.vala
+++ b/src/panel/panel.vala
@@ -477,7 +477,7 @@ namespace Budgie {
 					Budgie.AppletInfo? info = null;
 					string? uname = null;
 					try {
-						info = this.plugin_manager.load_applet_instance(uuid, out uname);
+						info = this.plugin_manager.load_applet_instance(uuid, null, out uname);
 						add_applet(info);
 					} catch (Error e) {
 						critical("Failed to load applet when we know it exists: %s", uname);
@@ -495,13 +495,14 @@ namespace Budgie {
 
 				while (iter.next(out uuid, null)) {
 					Budgie.AppletInfo? info = null;
+
 					try {
-						info = this.plugin_manager.create_new_applet(name, uuid);
-						add_applet(info);
+						info = this.plugin_manager.create_applet(name, uuid);
+						this.add_applet(info);
+						/* this.configure_applet(info); */
 					} catch (Error e) {
 						critical("Failed to load applet when we know it exists");
 					}
-					/* this.configure_applet(info); */
 				}
 				creating.remove(name);
 			}
@@ -536,7 +537,7 @@ namespace Budgie {
 					Budgie.AppletInfo? info = null;
 
 					try {
-						info = this.plugin_manager.load_applet_instance(applets[i], out name);
+						info = this.plugin_manager.load_applet_instance(applets[i], null, out name);
 					} catch (Error e) {
 						if (name == null) {
 							unowned List<string?> g = expected_uuids.find_custom(applets[i], strcmp);
@@ -900,7 +901,7 @@ namespace Budgie {
 			string? uuid = null;
 			unowned HashTable<string,string>? table = null;
 
-			if (!this.plugin_manager.is_extension_valid(plugin_name)) {
+			if (!this.plugin_manager.is_plugin_valid(plugin_name)) {
 				warning("Not loading invalid plugin: %s", plugin_name);
 				return;
 			}
@@ -910,7 +911,7 @@ namespace Budgie {
 				uuid = initial_uuid;
 			}
 
-			if (!this.plugin_manager.is_extension_loaded(plugin_name)) {
+			if (!this.plugin_manager.is_plugin_loaded(plugin_name)) {
 				/* Request a load of the new guy */
 				table = creating.lookup(plugin_name);
 				if (table != null) {
@@ -928,7 +929,7 @@ namespace Budgie {
 			}
 			/* Already exists */
 			try {
-				Budgie.AppletInfo? info = this.plugin_manager.create_new_applet(plugin_name, uuid);
+				Budgie.AppletInfo? info = this.plugin_manager.create_applet(plugin_name, uuid);
 				this.add_applet(info);
 			} catch (Error e) {
 				critical("Failed to load applet when we know it exists");
@@ -940,12 +941,12 @@ namespace Budgie {
 			string? rname = null;
 			unowned HashTable<string,string>? table = null;
 
-			if (!this.plugin_manager.is_extension_valid(plugin_name)) {
+			if (!this.plugin_manager.is_plugin_valid(plugin_name)) {
 				warning("Not adding invalid plugin: %s %s", plugin_name, uuid);
 				return null;
 			}
 
-			if (!this.plugin_manager.is_extension_loaded(plugin_name)) {
+			if (!this.plugin_manager.is_plugin_loaded(plugin_name)) {
 				/* Request a load of the new guy */
 				table = pending.lookup(plugin_name);
 				if (table != null) {
@@ -966,7 +967,7 @@ namespace Budgie {
 			Budgie.AppletInfo? info = null;
 
 			try {
-				info = this.plugin_manager.load_applet_instance(uuid, out rname);
+				info = this.plugin_manager.load_applet_instance(uuid, null, out rname);
 			} catch (Error e) {
 				critical("Failed to load applet when we know it exists");
 			}
diff --git a/src/panel/plugin/meson.build b/src/panel/plugin/meson.build
new file mode 100644
index 000000000..497678ee7
--- /dev/null
+++ b/src/panel/plugin/meson.build
@@ -0,0 +1,32 @@
+libpanelpluginmanager_deps = [
+  link_libconfig,
+  link_libpanelplugin,
+  dep_glib,
+  dep_gobject_introspection,
+  dep_peas,
+]
+
+libpanelpluginmanager_sources = [
+  'plugin-manager.c',
+]
+
+libpanelpluginmanager_headers = [
+  'plugin-manager.h',
+]
+
+libpanelpluginmanager = static_library(
+  'panelpluginmanager',
+  libpanelpluginmanager_sources,
+  dependencies: libpanelpluginmanager_deps,
+  include_directories: [
+    include_directories('.'),
+  ],
+  c_args: [
+      '-DWNCK_I_KNOW_THIS_IS_UNSTABLE',
+  ]
+)
+
+link_libpanelpluginmanager = declare_dependency(
+  link_with: libpanelpluginmanager,
+  include_directories: include_directories('.')
+)
diff --git a/src/panel/plugin/plugin-manager.c b/src/panel/plugin/plugin-manager.c
new file mode 100644
index 000000000..49cb78b3a
--- /dev/null
+++ b/src/panel/plugin/plugin-manager.c
@@ -0,0 +1,472 @@
+/*
+ * This file is part of budgie-desktop
+ *
+ * Copyright Budgie Desktop Developers
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#include "plugin-manager.h"
+
+#include "budgie-config.h"
+#include "applet.h"
+#include "plugin.h"
+
+#include <gobject-introspection-1.0/girepository.h>
+#include <libpeas-2/libpeas.h>
+
+/**
+ * BudgiePanelPluginManagerError:
+ * @BUDGIE_PANEL_PLUGIN_MANAGER_ERROR_INVALID: a plugin's info is invalid.
+ * @BUDGIE_PANEL_PLUGIN_MANAGER_ERROR_LOAD_FAILED: a plugin is unable to be loaded.
+ * @BUDGIE_PANEL_PLUGIN_MANAGER_ERROR_NOT_FOUND: the extension for a plugin could not be found.
+ * @BUDGIE_PANEL_PLUGIN_MANAGER_ERROR_NOT_LOADED: a plugin is not yet loaded.
+ *
+ * Possible errors of panel plugin manager related functions.
+ */
+
+/**
+ * BUDGIE_PANEL_PLUGIN_MANAGER_ERROR:
+ *
+ * The error domain of the Budgie panel plugin manager.
+ */
+G_DEFINE_QUARK(budgie_panel_plugin_manager_error, budgie_panel_plugin_manager_error)
+
+enum {
+	EXTENSION_LOADED,
+	LAST_SIGNAL
+};
+
+static guint signals[LAST_SIGNAL];
+
+struct _BudgiePanelPluginManager {
+	GObject parent_instance;
+
+	GSettings *settings;
+	PeasEngine *engine;
+	PeasExtensionSet *extensions;
+
+	GHashTable *plugins;
+};
+
+G_DEFINE_FINAL_TYPE(BudgiePanelPluginManager, budgie_panel_plugin_manager, G_TYPE_OBJECT)
+
+static void panel_plugin_manager_constructed(GObject *obj);
+static void panel_plugin_manager_finalize(GObject *obj);
+static void extension_added(PeasExtensionSet *set, PeasPluginInfo *info, GObject *extension, gpointer data);
+static gboolean is_migration_plugin(BudgiePanelPluginManager *self, const gchar *name);
+static PeasPluginInfo *get_plugin_info(BudgiePanelPluginManager *self, const gchar *name);
+static gchar *create_applet_path(const gchar* uuid);
+
+static void budgie_panel_plugin_manager_class_init(BudgiePanelPluginManagerClass *klazz) {
+	GObjectClass* class = G_OBJECT_CLASS(klazz);
+
+	class->constructed = panel_plugin_manager_constructed;
+	class->finalize = panel_plugin_manager_finalize;
+
+	/**
+	 * BudgiePanelPluginManager::extension-loaded:
+	 * @self: A #BudgiePanelPluginManager instance.
+	 * @plugin_name: The name of the loaded extension.
+	 *
+	 * Emitted when an extension has been added to
+	 * the #PeasEngine.
+	 */
+	signals[EXTENSION_LOADED] = g_signal_new("extension-loaded",
+											 G_TYPE_FROM_CLASS(klazz),
+											 G_SIGNAL_RUN_LAST,
+											 0,
+											 NULL, NULL, NULL,
+											 G_TYPE_NONE,
+											 1,
+											 G_TYPE_STRING);
+}
+
+static void budgie_panel_plugin_manager_init(BudgiePanelPluginManager *self) {
+	const gchar *user_data_dir;
+	g_autofree gchar *user_mod_dir = NULL;
+	g_autofree gchar *hdata_dir = NULL;
+	g_autofree gchar *hmod_dir = NULL;
+	g_autoptr(GError) error = NULL;
+
+	self->plugins = g_hash_table_new(g_str_hash, g_str_equal);
+	self->settings = g_settings_new("com.solus-project.budgie-panel");
+	self->engine = peas_engine_new();
+
+	peas_engine_enable_loader(self->engine, "python");
+
+	/* Ensure libpeas doesn't freak the hell out for Python extensions */
+
+	g_irepository_require(NULL, "Peas", "2", 0, &error);
+
+	if G_UNLIKELY (error) {
+		g_warning("Error loading typelibs: %s", error->message);
+		g_clear_error(error);
+	}
+
+	g_irepository_require(NULL, "Budgie", "2.0", 0, &error);
+
+	if G_UNLIKELY (error) {
+		g_warning("Error loading typelibs: %s", error->message);
+		g_clear_error(error);
+	}
+
+	/* System path */
+	peas_engine_add_search_path(self->engine, BUDGIE_MODULE_DIRECTORY, BUDGIE_MODULE_DATA_DIRECTORY);
+
+	if (BUDGIE_HAS_SECONDARY_PLUGIN_DIRS) {
+		peas_engine_add_search_path(self->engine, BUDGIE_MODULE_DIRECTORY_SECONDARY, BUDGIE_MODULE_DATA_DIRECTORY_SECONDARY);
+	}
+
+	/* User path */
+	user_data_dir = g_get_user_data_dir();
+	user_mod_dir = g_build_path(G_DIR_SEPARATOR_S, user_data_dir, "budgie-desktop", "plugins", NULL);
+	hdata_dir = g_build_path(G_DIR_SEPARATOR_S, user_data_dir, "budgie-desktop", "data", NULL);
+
+	peas_engine_add_search_path(self->engine, user_mod_dir, hdata_dir);
+
+	/* Scan and collect our plugins */
+	peas_engine_rescan_plugins(self->engine);
+
+	self->extensions = peas_extension_set_new(self->engine, BUDGIE_TYPE_PLUGIN, NULL);
+
+	peas_extension_set_foreach(self->extensions, (PeasExtensionSetForeachFunc) extension_added, self);
+	g_signal_connect(self->extensions, "extension-added", G_CALLBACK(extension_added), self);
+}
+
+static void panel_plugin_manager_constructed(GObject *obj) {}
+
+static void panel_plugin_manager_finalize(GObject *obj) {
+	BudgiePanelPluginManager *self;
+
+	self = BUDGIE_PANEL_PLUGIN_MANAGER(obj);
+
+	g_object_unref(self->settings);
+	g_object_unref(self->extensions);
+	g_object_unref(self->engine);
+
+	g_hash_table_unref(self->plugins);
+
+	G_OBJECT_CLASS(budgie_panel_plugin_manager_parent_class)->finalize(obj);
+}
+
+static void extension_added(PeasExtensionSet *set, PeasPluginInfo *info, GObject *extension, gpointer data) {
+	g_return_if_fail(PEAS_IS_PLUGIN_INFO(info));
+	g_return_if_fail(extension != NULL);
+
+	BudgiePanelPluginManager *self = data;
+	gchar *plugin_name = NULL;
+
+	plugin_name = peas_plugin_info_get_name(info);
+
+	if G_UNLIKELY (g_hash_table_contains(self->plugins, plugin_name)) {
+		return;
+	}
+
+	g_hash_table_insert(self->plugins, g_strdup(plugin_name), g_object_ref(info));
+	g_signal_emit(self, signals[EXTENSION_LOADED], 0, g_strdup(plugin_name));
+}
+
+/**
+ * get_plugin_info:
+ * @self: A #BudgiePanelPluginManager instance.
+ * @name: A plugin name.
+ *
+ * Gets the #PeasPluginInfo corresponding to a plugin with @name,
+ * or %NULL if no plugin with @name is found.
+ *
+ * Returns: (transfer full): The #PeasPluginInfo corresponding to @name.
+ */
+static PeasPluginInfo *get_plugin_info(BudgiePanelPluginManager *self, const gchar *name) {
+	GListModel *list = (GListModel *)self->engine;
+	gint i, n_items = g_list_model_get_n_items(list);
+
+	for (i = 0; i < n_items; i++) {
+		PeasPluginInfo *info = (PeasPluginInfo *)g_list_model_get_item(list, i);
+		gchar *found_name = peas_plugin_info_get_name(info);
+
+		if (g_strcmp0(found_name, name) == 0) {
+			return info;
+		}
+	}
+
+	return NULL;
+}
+
+/**
+ * create_applet_path:
+ * @uuid: A plugin's UUID.
+ *
+ * Concatenates the object path for an applet.
+ *
+ * Returns: (not nullable) (transfer full): The applet path.
+ */
+static gchar *create_applet_path(const gchar* uuid) {
+	return g_strdup_printf("%s/{%s}/", BUDGIE_APPLET_PREFIX, uuid);
+}
+
+
+/**
+ * budgie_panel_plugin_manager_new:
+ *
+ * Creates a new #BudgiePanelPluginManager object.
+ *
+ * During creation, a new #PeasEngine instance will be created. We
+ * add a few directories for the engine to search for plugins:
+ *
+ * 1) The main configured %BUDGIE_MODULE_DIRECTORY
+ * 2) A secondary configured $BUDGIE_MODULE_DIRECTORY_SECONDARY, if set
+ * 3) XDG_DATA_HOME/budgie-desktop/plugins
+ * 4) XDG_DATA_HOME/budgie-desktop/modules (legacy)
+ *
+ * The engine then scans for plugins.
+ *
+ * Returns: (transfer full): A new #BudgiePanelPluginManager object.
+ */
+BudgiePanelPluginManager *budgie_panel_plugin_manager_new() {
+	return g_object_new(BUDGIE_TYPE_PANEL_PLUGIN_MANAGER, NULL);
+}
+
+/**
+ * budgie_panel_plugin_manager_get_all_plugins:
+ * @self: A #BudgiePanelPluginManager
+ *
+ * Gets all of the loaded plugins, or %NULL if no plugins have been
+ * loaded by the Peas engine.
+ *
+ * Returns: (transfer full): A #GList of #PeasPluginInfo of all loaded
+ *   plugins.
+ */
+GList *budgie_panel_plugin_manager_get_all_plugins(BudgiePanelPluginManager *self) {
+	g_return_val_if_fail(BUDGIE_IS_PANEL_PLUGIN_MANAGER(self), NULL);
+
+	GList *plugins = NULL;
+	GListModel *list = (GListModel *)self->engine;
+	gint i, n_items = g_list_model_get_n_items(list);
+
+	for (i = 0; i < n_items; i++) {
+		PeasPluginInfo *info = (PeasPluginInfo *)g_list_model_get_item(list, i);
+		plugins = g_list_append(plugins, info);
+	}
+
+	return plugins;
+}
+
+/**
+ * budgie_panel_plugin_manager_is_plugin_loaded:
+ * @self: A #BudgiePanelPluginManager instance.
+ * @name: The name of a plugin.
+ *
+ * Checks if the plugin with the name @name is loaded.
+ *
+ * Returns: %TRUE if the plugin is loaded, %FALSE otherwise.
+ */
+gboolean budgie_panel_plugin_manager_is_plugin_loaded(BudgiePanelPluginManager *self, const gchar *name) {
+	g_return_val_if_fail(BUDGIE_IS_PANEL_PLUGIN_MANAGER(self), FALSE);
+	g_return_val_if_fail(name != NULL, FALSE);
+
+	return g_hash_table_contains(self->plugins, name);
+}
+
+/**
+ * budgie_panel_plugin_manager_is_plugin_valid:
+ * @self: A #BudgiePanelPluginManager instance.
+ * @name: The name of a plugin.
+ *
+ * Checks if the plugin with name @name is valid. We do this
+ * by trying to get the #PeasPluginInfo with @name, and returning
+ * %TRUE if it is found.
+ *
+ * Returns: %TRUE if the plugin is valid, %FALSE otherwise.
+ */
+gboolean budgie_panel_plugin_manager_is_plugin_valid(BudgiePanelPluginManager *self, const gchar *name) {
+	g_return_val_if_fail(BUDGIE_IS_PANEL_PLUGIN_MANAGER(self), FALSE);
+	g_return_val_if_fail(name != NULL, FALSE);
+
+	g_autoptr(PeasPluginInfo) info = NULL;
+
+	info = get_plugin_info(self, name);
+
+	return PEAS_IS_PLUGIN_INFO(info);
+}
+
+/**
+ * budgie_panel_plugin_manager_rescan_plugins:
+ * @self: A #BudgiePanelPluginManager instance.
+ *
+ * Triggers a re-scan by the #PeasEngine for plugins.
+ */
+void budgie_panel_plugin_manager_rescan_plugins(BudgiePanelPluginManager *self) {
+	g_return_if_fail(BUDGIE_IS_PANEL_PLUGIN_MANAGER(self));
+
+	peas_engine_garbage_collect(self->engine);
+	peas_engine_rescan_plugins(self->engine);
+}
+
+/**
+ * budgie_panel_plugin_manager_modprobe:
+ * @self: A #BudgiePanelPluginManager instance.
+ * @name: The name of a plugin.
+ *
+ * Tells the #PeasEngine to load the plugin with the name @name.
+ */
+void budgie_panel_plugin_manager_modprobe(BudgiePanelPluginManager *self, const gchar *name) {
+	g_return_if_fail(BUDGIE_IS_PANEL_PLUGIN_MANAGER(self));
+	g_return_if_fail(name != NULL);
+
+	g_autoptr(PeasPluginInfo) info = NULL;
+	gboolean success = FALSE;
+
+	info = get_plugin_info(self, name);
+
+	if G_UNLIKELY (!PEAS_IS_PLUGIN_INFO(info)) {
+		g_warning("modprobe called for non existent module: %s", name);
+		return;
+	}
+
+	success = peas_engine_load_plugin(self->engine, info);
+
+	if (!success) {
+		g_warning("Failed to load plugin with name '%s'", name);
+	}
+}
+
+/**
+ * budgie_panel_plugin_manager_load_applet_instance:
+ * @self: A #BudgiePanelPluginManager instance.
+ * @uuid: A plugin's UUID.
+ * @settings: (optional): The plugin's #GSettings instance.
+ * @name: (out callee-allocates): (optional): A return location for a plugin's name.
+ * @err: (out callee-allocates): (optional): A return location for a #GError.
+ *
+ * Attempt to load an instance of a Budgie plugin. If the plugin
+ * could not be loaded, %NULL will be returned, and @err will be set.
+ *
+ * Returns: (transfer full): The plugin's #BudgieAppletInfo if loaded, or %NULL.
+ */
+BudgieAppletInfo *budgie_panel_plugin_manager_load_applet_instance(BudgiePanelPluginManager *self, const gchar *uuid, GSettings *plugin_settings, gchar **name, GError **err) {
+	g_return_val_if_fail(BUDGIE_IS_PANEL_PLUGIN_MANAGER(self), NULL);
+	g_return_val_if_fail(uuid != NULL, NULL);
+	g_return_val_if_fail(name == NULL || *name == NULL, NULL);
+	g_return_val_if_fail(err == NULL || *err == NULL, NULL);
+
+	g_autofree gchar *path = NULL;
+	g_autoptr(GSettings) settings = NULL;
+	g_autofree gchar *plugin_name = NULL;
+	g_autoptr(PeasPluginInfo) info = NULL;
+	GObject *extension = NULL;
+	BudgieApplet *applet = NULL;
+
+	// Make sure we have a valid settings instance for the plugin
+	path = create_applet_path(uuid);
+
+	if (plugin_settings == NULL) {
+		settings = g_settings_new_with_path(BUDGIE_APPLET_SCHEMA, g_strdup(path));
+	} else {
+		settings = g_object_ref(plugin_settings);
+	}
+
+	plugin_name = g_settings_get_string(settings, BUDGIE_APPLET_KEY_NAME);
+	info = g_hash_table_lookup(self->plugins, plugin_name);
+
+	// Check if the plugin has been loaded
+	if (!PEAS_IS_PLUGIN_INFO(info)) {
+		info = get_plugin_info(self, plugin_name);
+
+		if (!PEAS_IS_PLUGIN_INFO(info)) {
+			g_set_error(err,
+					BUDGIE_PANEL_PLUGIN_MANAGER_ERROR,
+						BUDGIE_PANEL_PLUGIN_MANAGER_ERROR_INVALID,
+					"Tried to load invalid plugin '%s' with UUID %s", g_strdup(plugin_name), uuid);
+			*name = g_strdup(plugin_name);
+			return NULL;
+		}
+
+		// Try to load the plugin
+		gboolean success = peas_engine_load_plugin(self->engine, info);
+
+		if (!success) {
+			g_set_error(err,
+					BUDGIE_PANEL_PLUGIN_MANAGER_ERROR,
+						BUDGIE_PANEL_PLUGIN_MANAGER_ERROR_LOAD_FAILED,
+					"Unable to load plugin '%s' with UUID %s", g_strdup(plugin_name), uuid);
+			*name = g_strdup(plugin_name);
+			return NULL;
+		}
+
+		// Plugin will be loaded. We bail here because the loading doesn't actually happen
+		// until the signal handler has been called.
+		g_set_error(err,
+				BUDGIE_PANEL_PLUGIN_MANAGER_ERROR,
+					BUDGIE_PANEL_PLUGIN_MANAGER_ERROR_NOT_LOADED,
+				"Plugin '%s' with UUID %s has not been loaded", g_strdup(plugin_name), uuid);
+		*name = g_strdup(plugin_name);
+		return NULL;
+	}
+
+	extension = peas_extension_set_get_extension(self->extensions, info);
+
+	if (!extension) {
+		g_set_error(err,
+				BUDGIE_PANEL_PLUGIN_MANAGER_ERROR,
+					BUDGIE_PANEL_PLUGIN_MANAGER_ERROR_NOT_FOUND,
+				"Could not find extension for plugin '%s' with UUID %s", g_strdup(plugin_name), uuid);
+		*name = g_strdup(plugin_name);
+		return NULL;
+	}
+
+	applet = budgie_plugin_get_panel_widget(BUDGIE_PLUGIN(extension), uuid);
+
+	return budgie_applet_info_new(info, uuid, applet, settings);
+}
+
+/**
+ * budgie_panel_plugin_manager_create_applet:
+ * @self: A #BudgiePanelPluginManager instance.
+ * @name: The name of a plugin.
+ * @uuid: The UUID of a plugin.
+ * @err: (out callee-allocates): (optional): A return location for a #GError.
+ *
+ * Attempts to create a new instance of a Budgie panel applet,
+ * and returning the resulting #BudgieAppletInfo. If the applet
+ * could not be loaded, i.e. if it hasn't been loaded by the #PeasEngine,
+ * this function returns %NULL.
+ *
+ * Returns: (transfer full): The #BudgieAppletInfo for this plugin.
+ */
+BudgieAppletInfo *budgie_panel_plugin_manager_create_applet(BudgiePanelPluginManager *self, const gchar *name, const gchar *uuid, GError **err) {
+	g_return_val_if_fail(BUDGIE_IS_PANEL_PLUGIN_MANAGER(self), NULL);
+	g_return_val_if_fail(name != NULL, NULL);
+	g_return_val_if_fail(uuid != NULL, NULL);
+	g_return_val_if_fail(err == NULL || *err == NULL, NULL);
+
+	g_autofree gchar *path = NULL;
+	g_autoptr(GSettings) settings = NULL;
+	BudgieAppletInfo *info = NULL;
+	GError *temp_err = NULL;
+
+	if G_UNLIKELY (!g_hash_table_contains(self->plugins, name)) {
+		g_set_error(err,
+		    BUDGIE_PANEL_PLUGIN_MANAGER_ERROR,
+		      BUDGIE_PANEL_PLUGIN_MANAGER_ERROR_NOT_LOADED,
+		    "Attempted to create a plugin that isn't loaded: %s", name);
+		return NULL;
+	}
+
+	path = create_applet_path(uuid);
+	settings = g_settings_new_with_path(BUDGIE_APPLET_SCHEMA, g_strdup(path));
+
+	g_settings_set_string(settings, BUDGIE_APPLET_KEY_NAME, g_strdup(name));
+
+	info = budgie_panel_plugin_manager_load_applet_instance(self, uuid, settings, NULL, &temp_err);
+
+	if (!BUDGIE_IS_APPLET_INFO(info)) {
+		g_propagate_error(err, temp_err);
+		return NULL;
+	}
+
+	return info;
+}
diff --git a/src/panel/plugin/plugin-manager.h b/src/panel/plugin/plugin-manager.h
new file mode 100644
index 000000000..411a18e35
--- /dev/null
+++ b/src/panel/plugin/plugin-manager.h
@@ -0,0 +1,66 @@
+/*
+ * This file is part of budgie-desktop
+ *
+ * Copyright Budgie Desktop Developers
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#ifndef _PLUGIN_MANAGER_H
+#define _PLUGIN_MANAGER_H
+
+#include <glib-object.h>
+#include <libpeas-2/libpeas.h>
+
+#include "applet-info.h"
+
+G_BEGIN_DECLS
+
+/**
+ * BUDGIE_APPLET_PREFIX:
+ * Prefix for all relocatable applet settings
+ */
+#define BUDGIE_APPLET_PREFIX "/com/solus-project/budgie-panel/applets"
+
+/**
+ * BUDGIE_APPLET_SCHEMA:
+ * Relocatable schema ID for applets
+ */
+#define BUDGIE_APPLET_SCHEMA "com.solus-project.budgie-panel.applet"
+
+#define BUDGIE_PANEL_PLUGIN_MANAGER_ERROR budgie_panel_plugin_manager_error_quark()
+GQuark budgie_panel_plugin_manager_error_quark(void);
+
+typedef enum {
+	BUDGIE_PANEL_PLUGIN_MANAGER_ERROR_INVALID, /* Invalid plugin info */
+	BUDGIE_PANEL_PLUGIN_MANAGER_ERROR_LOAD_FAILED, /* Unable to load plugin */
+	BUDGIE_PANEL_PLUGIN_MANAGER_ERROR_NOT_FOUND, /* Extension for plugin not found */
+	BUDGIE_PANEL_PLUGIN_MANAGER_ERROR_NOT_LOADED, /* Plugin is not loaded */
+} BudgiePanelPluginManagerError;
+
+#define BUDGIE_TYPE_PANEL_PLUGIN_MANAGER (budgie_panel_plugin_manager_get_type())
+
+G_DECLARE_FINAL_TYPE(BudgiePanelPluginManager, budgie_panel_plugin_manager, BUDGIE, PANEL_PLUGIN_MANAGER, GObject)
+
+BudgiePanelPluginManager *budgie_panel_plugin_manager_new();
+
+gboolean budgie_panel_plugin_manager_is_plugin_loaded(BudgiePanelPluginManager *self, const gchar *name);
+
+gboolean budgie_panel_plugin_manager_is_plugin_valid(BudgiePanelPluginManager *self, const gchar *name);
+
+GList *budgie_panel_plugin_manager_get_all_plugins(BudgiePanelPluginManager *self);
+
+void budgie_panel_plugin_manager_rescan_plugins(BudgiePanelPluginManager *self);
+
+void budgie_panel_plugin_manager_modprobe(BudgiePanelPluginManager *self, const gchar *name);
+
+BudgieAppletInfo *budgie_panel_plugin_manager_load_applet_instance(BudgiePanelPluginManager *self, const gchar *uuid, GSettings *settings, gchar **name, GError **err);
+
+BudgieAppletInfo *budgie_panel_plugin_manager_create_applet(BudgiePanelPluginManager *self, const gchar *name, const gchar *uuid, GError **err);
+
+G_END_DECLS
+
+#endif
diff --git a/src/panel/plugin/plugin-manager.vapi b/src/panel/plugin/plugin-manager.vapi
new file mode 100644
index 000000000..4a36304c1
--- /dev/null
+++ b/src/panel/plugin/plugin-manager.vapi
@@ -0,0 +1,48 @@
+using Budgie;
+using GLib;
+using Peas;
+
+[CCode (cprefix = "Budgie", lower_case_cprefix = "budgie_")]
+namespace Budgie {
+	[CCode (cheader_filename = "plugin/plugin-manager.h", cprefix = "BUDGIE_", cname = "BUDGIE_APPLET_PREFIX")]
+	public const string APPLET_PREFIX;
+	[CCode (cheader_filename = "plugin/plugin-manager.h", cprefix = "BUDGIE_", cname = "BUDGIE_APPLET_SCHEMA")]
+	public const string APPLET_SCHEMA;
+
+	[CCode (cheader_filename = "plugin/plugin-manager.h", cname = "BudgiePanelPluginManagerError", cprefix = "BUDGIE_PANEL_PLUGIN_MANAGER_ERROR_", has_type_id = false)]
+	public errordomain PanelPluginManagerError {
+		INVALID,
+		LOAD_FAILED,
+		NOT_FOUND,
+		NOT_LOADED
+	}
+
+	[CCode (cheader_filename = "plugin/plugin-manager.h", cname = "BudgiePanelPluginManager", type_id = "budgie_panel_plugin_manager_get_type ()")]
+	public class PanelPluginManager : GLib.Object {
+		[CCode (cname = "budgie_panel_plugin_manager_new")]
+		public PanelPluginManager ();
+
+		[CCode (cname = "budgie_panel_plugin_manager_is_plugin_loaded")]
+		public bool is_plugin_loaded (string name);
+
+		[CCode (cname = "budgie_panel_plugin_manager_is_plugin_valid")]
+		public bool is_plugin_valid (string name);
+
+		[CCode (cname = "budgie_panel_plugin_manager_get_all_plugins")]
+		public GLib.List<Peas.PluginInfo> get_all_plugins ();
+
+		[CCode (cname = "budgie_panel_plugin_manager_rescan_plugins")]
+		public void rescan_plugins ();
+
+		[CCode (cname = "budgie_panel_plugin_manager_modprobe")]
+		public void modprobe (string name);
+
+		[CCode (cname = "budgie_panel_plugin_manager_load_applet_instance")]
+		public Budgie.AppletInfo? load_applet_instance (string uuid, GLib.Settings? settings, out string name) throws Budgie.PanelPluginManagerError;
+
+		[CCode (cname = "budgie_panel_plugin_manager_create_applet")]
+		public Budgie.AppletInfo? create_applet (string name, string uuid) throws Budgie.PanelPluginManagerError;
+
+		public signal void extension_loaded(string name);
+	}
+}

From f77a0564b86db4b0e20f8c5521a68faaeb75c7d5 Mon Sep 17 00:00:00 2001
From: Joshua Strobl <me@joshuastrobl.com>
Date: Sat, 13 Sep 2025 17:11:52 +0300
Subject: [PATCH 05/11] fix: restore g_irepository_require for Budgie back to
 1.0 (2.0 bump was 10.10)

---
 src/panel/plugin/plugin-manager.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/panel/plugin/plugin-manager.c b/src/panel/plugin/plugin-manager.c
index 49cb78b3a..1f0d32d60 100644
--- a/src/panel/plugin/plugin-manager.c
+++ b/src/panel/plugin/plugin-manager.c
@@ -107,7 +107,7 @@ static void budgie_panel_plugin_manager_init(BudgiePanelPluginManager *self) {
 		g_clear_error(error);
 	}
 
-	g_irepository_require(NULL, "Budgie", "2.0", 0, &error);
+	g_irepository_require(NULL, "Budgie", "1.0", 0, &error);
 
 	if G_UNLIKELY (error) {
 		g_warning("Error loading typelibs: %s", error->message);

From 68d5136613fa1b15d39cc67ada3085590ec162ae Mon Sep 17 00:00:00 2001
From: Joshua Strobl <me@joshuastrobl.com>
Date: Sat, 13 Sep 2025 17:36:19 +0300
Subject: [PATCH 06/11] chore: clean up old plugin manager

---
 src/panel/plugin_manager.vala | 205 ----------------------------------
 1 file changed, 205 deletions(-)
 delete mode 100644 src/panel/plugin_manager.vala

diff --git a/src/panel/plugin_manager.vala b/src/panel/plugin_manager.vala
deleted file mode 100644
index 98674e2a4..000000000
--- a/src/panel/plugin_manager.vala
+++ /dev/null
@@ -1,205 +0,0 @@
-/*
- * This file is part of budgie-desktop
- *
- * Copyright Budgie Desktop Developers
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- */
-
-namespace Budgie {
-	public class PanelPluginManager {
-		Settings settings;
-		Peas.Engine engine;
-		Peas.ExtensionSet extensions;
-
-		HashTable<string,Peas.PluginInfo?> plugins;
-
-		/**
-		* Updated when specific names are queried
-		*/
-		public bool migrate_load_requirements_met = false;
-
-		public PanelPluginManager() {
-			plugins = new HashTable<string,Peas.PluginInfo?>(str_hash, str_equal);
-			settings = new Settings(Budgie.ROOT_SCHEMA);
-
-			engine = new Peas.Engine();
-			engine.enable_loader("python");
-
-			/* Ensure libpeas doesn't freak the hell out for Python extensions */
-			try {
-				var repo = GI.Repository.get_default();
-				repo.require("Peas", "2", 0);
-				repo.require("Budgie", "1.0", 0);
-			} catch (Error e) {
-				message("Error loading typelibs: %s", e.message);
-			}
-
-			/* System path */
-			var dir = Environment.get_user_data_dir();
-			engine.add_search_path(Budgie.MODULE_DIRECTORY, Budgie.MODULE_DATA_DIRECTORY);
-			if (Budgie.HAS_SECONDARY_PLUGIN_DIRS) {
-				engine.add_search_path(Budgie.MODULE_DIRECTORY_SECONDARY, Budgie.MODULE_DATA_DIRECTORY_SECONDARY);
-			}
-
-			/* User path */
-			var user_mod = Path.build_path(Path.DIR_SEPARATOR_S, dir, "budgie-desktop", "plugins");
-			var hdata = Path.build_path(Path.DIR_SEPARATOR_S, dir, "budgie-desktop", "data");
-			engine.add_search_path(user_mod, hdata);
-
-			/* Legacy path */
-			var hmod = Path.build_path(Path.DIR_SEPARATOR_S, dir, "budgie-desktop", "modules");
-			if (FileUtils.test(hmod, FileTest.EXISTS)) {
-				warning("Using legacy path %s, please migrate to %s", hmod, user_mod);
-				message("Legacy %s path will not be supported in next major version", hmod);
-				engine.add_search_path(hmod, hdata);
-			}
-			engine.rescan_plugins();
-
-			extensions = new Peas.ExtensionSet.with_properties(engine, typeof(Budgie.Plugin), {}, {});
-
-			extensions.extension_added.connect(on_extension_added);
-			engine.load_plugin.connect_after((i) => {
-				var e = extensions.get_extension(i);
-				if (e == null) {
-					critical("Failed to find extension for: %s", i.get_name());
-					return;
-				}
-				on_extension_added(i, e);
-			});
-		}
-
-		string create_applet_path(string uuid) {
-			return "%s/{%s}/".printf(Budgie.APPLET_PREFIX, uuid);
-		}
-
-		/**
-		* Indicate that a plugin that was being waited for, is now available
-		*/
-		public signal void extension_loaded(string name);
-
-		/**
-		* Handle extension loading
-		*/
-		void on_extension_added(Peas.PluginInfo? info, Object p) {
-			if (plugins.contains(info.get_name())) {
-				return;
-			}
-			plugins.insert(info.get_name(), info);
-			extension_loaded(info.get_name());
-		}
-
-		public bool is_extension_loaded(string name) {
-			if (name in MIGRATION_1_APPLETS) {
-				migrate_load_requirements_met = true;
-			}
-			return plugins.contains(name);
-		}
-
-		/**
-		* Determine if the extension is known to be valid
-		*/
-		public bool is_extension_valid(string name) {
-			if (name in MIGRATION_1_APPLETS) {
-				migrate_load_requirements_met = true;
-			}
-			if (this.get_plugin_info(name) == null) {
-				return false;
-			}
-			return true;
-		}
-
-		public List<Peas.PluginInfo?> get_all_plugins() {
-			List<Peas.PluginInfo?> ret = new List<Peas.PluginInfo?>();
-			var list = this.engine.get_n_items();
-			for (int i=0; i < list; i++) {
-				Peas.PluginInfo? info = (Peas.PluginInfo)this.engine.get_item(i);
-				if (info != null) {
-					ret.append(info);
-				}
-			}
-			
-			return ret;
-		}
-
-		public void rescan_plugins() {
-			engine.garbage_collect();
-			engine.rescan_plugins();
-		}
-
-		/**
-		* PeasEngine.get_plugin_info == completely broken
-		*/
-		private Peas.PluginInfo? get_plugin_info(string name) {
-			var list = this.engine.get_n_items();
-			for (int i=0; i < list; i++) {
-				Peas.PluginInfo? info = (Peas.PluginInfo)this.engine.get_item(i);
-				if (info.get_name() == name) {
-					return info;
-				}
-			}
-			return null;
-		}
-
-		public void modprobe(string name) {
-			Peas.PluginInfo? i = this.get_plugin_info(name);
-			if (i == null) {
-				warning("budgie_panel_modprobe called for non existent module: %s", name);
-				return;
-			}
-			this.engine.load_plugin(i);
-		}
-
-		/**
-		* Attempt to load plugin, will set the plugin-name on failure
-		*/
-		public Budgie.AppletInfo? load_applet_instance(string? uuid, out string name, Settings? psettings = null) {
-			var path = this.create_applet_path(uuid);
-			Settings? settings = null;
-			if (psettings == null) {
-				settings = new Settings.with_path(Budgie.APPLET_SCHEMA, path);
-			} else {
-				settings = psettings;
-			}
-			var pname = settings.get_string(Budgie.APPLET_KEY_NAME);
-			Peas.PluginInfo? pinfo = plugins.lookup(pname);
-
-			/* Not yet loaded */
-			if (pinfo == null) {
-				pinfo = this.get_plugin_info(pname);
-				if (pinfo == null) {
-					warning("Trying to load invalid plugin: %s %s", pname, uuid);
-					name = null;
-					return null;
-				}
-				engine.load_plugin(pinfo);
-				name = pname;
-				return null;
-			}
-			var extension = extensions.get_extension(pinfo);
-			if (extension == null) {
-				name = pname;
-				return null;
-			}
-			name = null;
-			Budgie.Applet applet = ((Budgie.Plugin) extension).get_panel_widget(uuid);
-			return new Budgie.AppletInfo(pinfo, uuid, applet, settings);
-		}
-
-		/**
-		* Attempt to create a fresh applet instance
-		*/
-		public Budgie.AppletInfo? create_new_applet(string name, string uuid) {
-			if (!plugins.contains(name)) return null;
-			string? unused = null;
-
-			var path = this.create_applet_path(uuid);
-			var settings = new Settings.with_path(Budgie.APPLET_SCHEMA, path);
-			settings.set_string(Budgie.APPLET_KEY_NAME, name);
-			return this.load_applet_instance(uuid, out unused, settings);
-		}
-	}
-}

From 708ce8a009d02735dfd6fe41f3e184658704e752 Mon Sep 17 00:00:00 2001
From: Joshua Strobl <me@joshuastrobl.com>
Date: Fri, 31 Oct 2025 22:35:53 +0200
Subject: [PATCH 07/11] fix: bump from 1.0 to 2.0 ABI

---
 src/panel/plugin/plugin-manager.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/panel/plugin/plugin-manager.c b/src/panel/plugin/plugin-manager.c
index 1f0d32d60..49cb78b3a 100644
--- a/src/panel/plugin/plugin-manager.c
+++ b/src/panel/plugin/plugin-manager.c
@@ -107,7 +107,7 @@ static void budgie_panel_plugin_manager_init(BudgiePanelPluginManager *self) {
 		g_clear_error(error);
 	}
 
-	g_irepository_require(NULL, "Budgie", "1.0", 0, &error);
+	g_irepository_require(NULL, "Budgie", "2.0", 0, &error);
 
 	if G_UNLIKELY (error) {
 		g_warning("Error loading typelibs: %s", error->message);

From 94485e5be0bec9bff3c8271f173cd71239af33c5 Mon Sep 17 00:00:00 2001
From: Joshua Strobl <me@joshuastrobl.com>
Date: Fri, 31 Oct 2025 22:45:25 +0200
Subject: [PATCH 08/11] fix: bump raven abi

---
 src/raven/plugin_manager.vala | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/raven/plugin_manager.vala b/src/raven/plugin_manager.vala
index 1ff139c9a..57f7b4481 100644
--- a/src/raven/plugin_manager.vala
+++ b/src/raven/plugin_manager.vala
@@ -44,7 +44,7 @@ namespace Budgie {
 			try {
 				var repo = GI.Repository.get_default();
 				repo.require("Peas", "2", 0);
-				repo.require("BudgieRaven", "1.0", 0);
+				repo.require("BudgieRaven", "2.0", 0);
 			} catch (Error e) {
 				message("Error loading typelibs: %s", e.message);
 			}

From 1bfc387b8beada9ab6a70bb032b3f204ef02dd2a Mon Sep 17 00:00:00 2001
From: Joshua Strobl <me@joshuastrobl.com>
Date: Fri, 31 Oct 2025 22:57:36 +0200
Subject: [PATCH 09/11] fix: more bumps

---
 src/plugin/panel/meson.build | 8 ++++----
 src/plugin/raven/meson.build | 6 +++---
 2 files changed, 7 insertions(+), 7 deletions(-)

diff --git a/src/plugin/panel/meson.build b/src/plugin/panel/meson.build
index ae607e185..81cf51d6c 100644
--- a/src/plugin/panel/meson.build
+++ b/src/plugin/panel/meson.build
@@ -68,7 +68,7 @@ libpanelplugin_gir = gnome.generate_gir(
     libpanelplugin,
     sources: panel_plugin_sources + panel_plugin_headers + panel_plugin_enums,
     namespace: 'Budgie',
-    nsversion: '1.0',
+    nsversion: '2.0',
     dependencies: panel_plugin_deps,
     includes: [
         'GObject-2.0',
@@ -86,7 +86,7 @@ libpanelplugin_gir = gnome.generate_gir(
 )
 
 libpanelplugin_vapi = gnome.generate_vapi(
-    'budgie-1.0',
+    'budgie-2.0',
     sources: [libpanelplugin_gir[0]],
     packages: [
         'gtk+-3.0',
@@ -100,8 +100,8 @@ libpanelplugin_vapi = gnome.generate_vapi(
 pkgconfig.generate(
     name: 'Budgie',
     description: 'Budgie Plugin Library',
-    version: '2',
-    filebase: 'budgie-1.0',
+    version: '3',
+    filebase: 'budgie-2.0',
     subdirs: 'budgie-desktop',
     libraries: ['-L${libdir}', '-lbudgie-plugin'],
     requires: [
diff --git a/src/plugin/raven/meson.build b/src/plugin/raven/meson.build
index 82fa87c02..cad0b054d 100644
--- a/src/plugin/raven/meson.build
+++ b/src/plugin/raven/meson.build
@@ -61,7 +61,7 @@ libravenplugin_gir = gnome.generate_gir(
     libravenplugin,
     sources: ravenplugin_sources + ravenplugin_headers + ravenplugin_enums,
     namespace: 'BudgieRaven',
-    nsversion: '1.0',
+    nsversion: '2.0',
     dependencies: ravenplugin_deps,
     includes: [
         'GObject-2.0',
@@ -76,7 +76,7 @@ libravenplugin_gir = gnome.generate_gir(
 )
 
 libravenplugin_vapi = gnome.generate_vapi(
-    'budgie-raven-plugin-1.0',
+    'budgie-raven-plugin-2.0',
     sources: [libravenplugin_gir[0]],
     packages: [
         'gtk+-3.0',
@@ -90,7 +90,7 @@ libravenplugin_vapi = gnome.generate_vapi(
 pkgconfig.generate(
     name: 'budgie-raven-plugin',
     description: 'Budgie Raven Plugin Library',
-    version: '1',
+    version: '2',
     filebase: 'budgie-raven-plugin-1.0',
     subdirs: 'budgie-desktop',
     libraries: ['-L${libdir}', '-lbudgie-raven-plugin'],

From d4ed9613357e4706b04c72d706083ced8ae917ae Mon Sep 17 00:00:00 2001
From: Joshua Strobl <me@joshuastrobl.com>
Date: Sat, 1 Nov 2025 15:32:32 +0200
Subject: [PATCH 10/11] fix: include in plugin-manager.c should point to
 correct girepository

---
 src/panel/plugin/plugin-manager.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/panel/plugin/plugin-manager.c b/src/panel/plugin/plugin-manager.c
index 49cb78b3a..52d746424 100644
--- a/src/panel/plugin/plugin-manager.c
+++ b/src/panel/plugin/plugin-manager.c
@@ -15,7 +15,7 @@
 #include "applet.h"
 #include "plugin.h"
 
-#include <gobject-introspection-1.0/girepository.h>
+#include <glib-2.0/girepository/girepository.h>
 #include <libpeas-2/libpeas.h>
 
 /**

From 033b8692d5e33a99f9ee3816701362355b21ed02 Mon Sep 17 00:00:00 2001
From: Joshua Strobl <me@joshuastrobl.com>
Date: Sat, 1 Nov 2025 20:49:09 +0200
Subject: [PATCH 11/11] fix: girepository shenanigans

---
 meson.build                       |   2 +-
 src/panel/meson.build             |   2 +-
 src/panel/plugin/meson.build      |   2 +-
 src/panel/plugin/plugin-manager.c |  14 +++-
 src/raven/meson.build             |   2 +-
 src/raven/plugin_manager.vala     |  10 ---
 vapi/girepository-2.0.vapi        | 121 ++++++++++++++++++++++++++++++
 7 files changed, 136 insertions(+), 17 deletions(-)
 create mode 100644 vapi/girepository-2.0.vapi

diff --git a/meson.build b/meson.build
index 454ef7ffe..00e95ce34 100644
--- a/meson.build
+++ b/meson.build
@@ -44,7 +44,7 @@ dep_gtk3 = dependency('gtk+-3.0', version: '>= 3.24.0')
 dep_glib = dependency('glib-2.0', version: '>= 2.64.0')
 dep_gee = dependency('gee-0.8', version: '>= 0.20.0')
 dep_giounix = dependency('gio-unix-2.0', version: '>= 2.64.0')
-dep_gobject_introspection = dependency('gobject-introspection-1.0', version: '>= 1.84.0')
+dep_girepository = dependency('girepository-2.0', version: '>= 1.84.0')
 dep_peas = dependency('libpeas-2', version: '>= 1.99.0')
 dep_gdkx11 = dependency('gdk-x11-3.0', version: '>= 3.24.0')
 dep_libuuid = dependency('uuid')
diff --git a/src/panel/meson.build b/src/panel/meson.build
index dc5e0f006..f628ee877 100644
--- a/src/panel/meson.build
+++ b/src/panel/meson.build
@@ -46,7 +46,7 @@ panel_sources = [
 panel_deps = [
     libpanelplugin_vapi,
     dep_giounix,
-    dep_gobject_introspection,
+    dep_girepository,
     dep_gtk3,
     dep_peas,
     dep_libuuid,
diff --git a/src/panel/plugin/meson.build b/src/panel/plugin/meson.build
index 497678ee7..287ac28eb 100644
--- a/src/panel/plugin/meson.build
+++ b/src/panel/plugin/meson.build
@@ -2,7 +2,7 @@ libpanelpluginmanager_deps = [
   link_libconfig,
   link_libpanelplugin,
   dep_glib,
-  dep_gobject_introspection,
+  dep_girepository,
   dep_peas,
 ]
 
diff --git a/src/panel/plugin/plugin-manager.c b/src/panel/plugin/plugin-manager.c
index 52d746424..3bbbc64ad 100644
--- a/src/panel/plugin/plugin-manager.c
+++ b/src/panel/plugin/plugin-manager.c
@@ -15,7 +15,7 @@
 #include "applet.h"
 #include "plugin.h"
 
-#include <glib-2.0/girepository/girepository.h>
+#include <girepository/girepository.h>
 #include <libpeas-2/libpeas.h>
 
 /**
@@ -100,14 +100,22 @@ static void budgie_panel_plugin_manager_init(BudgiePanelPluginManager *self) {
 
 	/* Ensure libpeas doesn't freak the hell out for Python extensions */
 
-	g_irepository_require(NULL, "Peas", "2", 0, &error);
+	static GIRepository* repository;
+	
+	#if GLIB_CHECK_VERSION(2, 85, 0)
+    repository = gi_repository_dup_default ();
+#else
+    repository = gi_repository_new ();
+#endif
+
+	gi_repository_require(repository, "Peas", "2", 0, &error);
 
 	if G_UNLIKELY (error) {
 		g_warning("Error loading typelibs: %s", error->message);
 		g_clear_error(error);
 	}
 
-	g_irepository_require(NULL, "Budgie", "2.0", 0, &error);
+	gi_repository_require(NULL, "Budgie", "2.0", 0, &error);
 
 	if G_UNLIKELY (error) {
 		g_warning("Error loading typelibs: %s", error->message);
diff --git a/src/raven/meson.build b/src/raven/meson.build
index 1e6712081..b63bdeaf8 100644
--- a/src/raven/meson.build
+++ b/src/raven/meson.build
@@ -39,7 +39,7 @@ libraven_deps = [
     libravenplugin_vapi,
     libpanelplugin_vapi,
     dep_giounix,
-    dep_gobject_introspection,
+    dep_girepository,
     dep_gtk3,
     dep_gdkx11,
     dep_libuuid,
diff --git a/src/raven/plugin_manager.vala b/src/raven/plugin_manager.vala
index 57f7b4481..817fb3ee8 100644
--- a/src/raven/plugin_manager.vala
+++ b/src/raven/plugin_manager.vala
@@ -38,16 +38,6 @@ namespace Budgie {
 		*/
 		public void setup_plugins() {
 			engine = new Peas.Engine();
-			engine.enable_loader("python");
-
-			/* Ensure libpeas doesn't freak the hell out for Python plugins */
-			try {
-				var repo = GI.Repository.get_default();
-				repo.require("Peas", "2", 0);
-				repo.require("BudgieRaven", "2.0", 0);
-			} catch (Error e) {
-				message("Error loading typelibs: %s", e.message);
-			}
 
 			/* System path */
 			var dir = Environment.get_user_data_dir();
diff --git a/vapi/girepository-2.0.vapi b/vapi/girepository-2.0.vapi
new file mode 100644
index 000000000..005d3c8d8
--- /dev/null
+++ b/vapi/girepository-2.0.vapi
@@ -0,0 +1,121 @@
+/* girepository-2.0.vapi */
+
+[CCode (cprefix = "GI", gir_namespace = "GIRepository", gir_version = "2.0", lower_case_cprefix = "gi_")]
+namespace GI {
+	[CCode (cheader_filename = "girepository/girepository.h", type_id = "g_base_info_gtype_get_type ()", ref_function = "g_base_info_ref", unref_function = "g_base_info_unref")]
+	[Compact]
+	public class BaseInfo {
+	}
+	
+	[CCode (cheader_filename = "girepository/girepository.h", type_id = "g_base_info_gtype_get_type ()")]
+	[Compact]
+	public class InterfaceInfo : GI.BaseInfo {
+	}
+	
+	[CCode (cheader_filename = "girepository/girepository.h", type_id = "g_base_info_gtype_get_type ()")]
+	[Compact]
+	public class EnumInfo : GI.BaseInfo {
+	}
+	
+	[CCode (cheader_filename = "girepository/girepository.h", lower_case_csuffix = "irepository", type_id = "gi_repository_get_type ()")]
+	public class Repository : GLib.Object {
+		[CCode (has_construct_function = false)]
+		public Repository ();
+		
+		public void prepend_search_path (string directory);
+		public void prepend_library_path (string directory);
+		
+		[CCode (array_length_pos = 1.5, array_length_type = "size_t")]
+		public unowned string[] get_search_path (out size_t n_paths_out);
+		
+		[CCode (array_length_pos = 1.5, array_length_type = "size_t")]
+		public unowned string[] get_library_path (out size_t n_paths_out);
+		
+		public unowned string? load_typelib (GI.Typelib typelib, GI.RepositoryLoadFlags flags) throws GLib.Error;
+		
+		public bool is_registered (string namespace_, string? version);
+		
+		public unowned GI.BaseInfo? find_by_name (string namespace_, string name);
+		
+		[CCode (array_length_pos = 1.5, array_length_type = "size_t")]
+		public string[] enumerate_versions (string namespace_, out size_t n_versions_out);
+		
+		public unowned GI.Typelib? require (string namespace_, string? version, GI.RepositoryLoadFlags flags) throws GLib.Error;
+		
+		public unowned GI.Typelib? require_private (string typelib_dir, string namespace_, string? version, GI.RepositoryLoadFlags flags) throws GLib.Error;
+		
+		[CCode (array_length_pos = 1.5, array_length_type = "size_t")]
+		public string[] get_immediate_dependencies (string namespace_, out size_t n_dependencies_out);
+		
+		[CCode (array_length_pos = 1.5, array_length_type = "size_t")]
+		public string[] get_dependencies (string namespace_, out size_t n_dependencies_out);
+		
+		[CCode (array_length_pos = 1.5, array_length_type = "size_t")]
+		public string[] get_loaded_namespaces (out size_t n_namespaces_out);
+		
+		public unowned GI.BaseInfo? find_by_gtype (GLib.Type gtype);
+		
+		[CCode (array_length_pos = 2.5, array_length_type = "size_t")]
+		public void get_object_gtype_interfaces (GLib.Type gtype, out size_t n_interfaces_out, out unowned GI.InterfaceInfo[] interfaces_out);
+		
+		public uint get_n_infos (string namespace_);
+		
+		public unowned GI.BaseInfo? get_info (string namespace_, uint idx);
+		
+		public unowned GI.EnumInfo? find_by_error_domain (GLib.Quark domain);
+		
+		public unowned string? get_typelib_path (string namespace_);
+		
+		[CCode (array_length_pos = 1.5, array_length_type = "size_t")]
+		public unowned string[]? get_shared_libraries (string namespace_, out size_t out_n_elements);
+		
+		public unowned string? get_c_prefix (string namespace_);
+		
+		public unowned string? get_version (string namespace_);
+		
+		public static unowned GLib.OptionGroup get_option_group ();
+		
+		public static bool dump (string input_filename, string output_filename) throws GLib.Error;
+	}
+	
+	[CCode (cheader_filename = "girepository/girepository.h", ref_function = "gi_typelib_ref", unref_function = "gi_typelib_unref", type_id = "gi_typelib_get_type ()")]
+	[Compact]
+	public class Typelib {
+		[CCode (cname = "gi_typelib_new_from_bytes", has_construct_function = false)]
+		public static GI.Typelib? new_from_bytes (GLib.Bytes bytes) throws GLib.Error;
+		
+		[CCode (cname = "gi_typelib_ref")]
+		public unowned GI.Typelib @ref ();
+		
+		[CCode (cname = "gi_typelib_unref")]
+		public void unref ();
+		
+		[CCode (cname = "gi_typelib_get_namespace")]
+		public unowned string get_namespace ();
+		
+		[CCode (cname = "gi_typelib_symbol")]
+		public bool symbol (string symbol_name, out void* symbol);
+	}
+	
+	[CCode (cheader_filename = "girepository/girepository.h", cprefix = "GI_REPOSITORY_LOAD_FLAG_", has_type_id = false)]
+	[Flags]
+	public enum RepositoryLoadFlags {
+		NONE,
+		LAZY
+	}
+	
+	[CCode (cheader_filename = "girepository/girepository.h", cprefix = "GI_REPOSITORY_ERROR_", has_type_id = false)]
+	public errordomain RepositoryError {
+		TYPELIB_NOT_FOUND,
+		NAMESPACE_MISMATCH,
+		NAMESPACE_VERSION_CONFLICT,
+		LIBRARY_NOT_FOUND;
+		
+		[CCode (cname = "gi_repository_error_quark")]
+		public static GLib.Quark quark ();
+	}
+	
+	[CCode (cheader_filename = "girepository/girepository.h", cname = "gi_cclosure_marshal_generic")]
+	public void cclosure_marshal_generic (GLib.Closure closure, GLib.Value return_gvalue, uint n_param_values, [CCode (array_length = false)] GLib.Value[] param_values, void* invocation_hint, void* marshal_data);
+}
+
