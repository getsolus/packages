name       : blender
version    : 4.4.3
release    : 99
source     :
    - https://download.blender.org/source/blender-4.4.3.tar.xz : 99ecdef24ece14084016ee47c756eeb2fc8a09c8487a0296b45a117224dc5ca7
    - https://download.blender.org/demo/test/BMW27.blend.zip : 08170de260488c14855a13db81c8d5ad844bc6162c3db13e1d9ba8094f55fe2b
    - https://developer.download.nvidia.com/compute/cuda/12.6.2/local_installers/cuda_12.6.2_560.35.03_linux.run#cuda-sdk.run : 3729a89cb58f7ca6a46719cff110d6292aec7577585a8d71340f0dbac54fb237
    - https://developer.download.nvidia.com/redist/optix/v8.0/OptiX-8.0-Include.zip : ba617fbb61587bac99106dbd6cda5a27c9d178308cc423878ed72b220b8b951c
license    :
    - GPL-2.0-or-later
    - EULA # cuda/optix
homepage   : https://blender.org/
component  : multimedia.graphics
summary    : A fully integrated 3D graphics creation suite
description: |
    Blender is the free and open source 3D creation suite. It supports the entirety of the 3D pipelineâ€”modeling, rigging, animation, simulation, rendering, compositing and motion tracking, even video editing and game creation.
builddeps  :
    - pkgconfig(OpenColorIO)
    - pkgconfig(OpenEXR)
    - pkgconfig(OpenImageIO)
    - pkgconfig(epoxy)
    - pkgconfig(fftw3f)
    - pkgconfig(freetype2)
    - pkgconfig(jack)
    - pkgconfig(jemalloc)
    - pkgconfig(libavcodec)
    - pkgconfig(libdecor-0)
    - pkgconfig(libopenjp2)
    - pkgconfig(libpcre)
    - pkgconfig(libpulse)
    - pkgconfig(libtiff-4)
    - pkgconfig(libturbojpeg)
    - pkgconfig(libwebp)
    - pkgconfig(libzstd)
    - pkgconfig(lzo2)
    - pkgconfig(openal)
    - pkgconfig(oslcomp)
    - pkgconfig(pugixml)
    - pkgconfig(python3)
    - pkgconfig(sdl2)
    - pkgconfig(shaderc)
    - pkgconfig(sndfile)
    - pkgconfig(tbb)
    - pkgconfig(vulkan)
    - pkgconfig(wayland-protocols)
    - pkgconfig(xi)
    - pkgconfig(xkbcommon)
    - pkgconfig(xrender)
    - pkgconfig(xxf86vm)
    - alembic-devel
    - embree-devel
    - gcc-13
    - libharu-devel
    - numpy
    - openimagedenoise-devel
    - opensubdiv-devel
    - openvdb-devel
    - potrace-devel
    - rocm-hip
rundeps    :
    - rocm-clr
clang      : true
environment: |
    export ROCM_PATH=/usr
    export HIP_PATH=/usr
    # ROCm's LLVM fork has a bug that causes memory access
    # fault when rendering the classroom example with cycles.
    export HIP_CLANG_PATH=/usr/bin
    export DEVICE_LIB_PATH=/usr/lib64/amdgcn/bitcode

    # CUDA only supports GCC 13
    export NVCC_CCBIN='/usr/bin/g++-13'
setup      : |
    mkdir cuda-sdk cuda-tmp optix-headers

    pushd optix-headers
    unzip $sources/OptiX-*.zip
    popd

    pushd $sources
    sh cuda-sdk.run --silent --toolkit --toolkitpath=$workdir/cuda-sdk --tmpdir=$workdir/cuda-tmp --override
    popd

    # Allow gcc-14 to work
    sed -i "/.*unsupported GNU version.*/d" cuda-sdk/include/crt/host_config.h
    sed -i "/.*unsupported clang version.*/d" cuda-sdk/include/crt/host_config.h

    %patch -p1 -i $pkgfiles/fix-glibc241.patch

    export LDFLAGS="$LDFLAGS -Wl,--undefined-version"

    %cmake_ninja \
        -DCMAKE_CXX_STANDARD=17 \
        -DCUDA_HOST_COMPILER="$NVCC_CCBIN" \
        -DCUDA_TOOLKIT_ROOT_DIR=$workdir/cuda-sdk/ \
        -DPYTHON_VERSION=%python3_version% \
        -DPYTHON_LIBPATH=%libdir% \
        -DPYTHON_LIBRARY=python%python3_version% \
        -DPYTHON_INCLUDE_DIR=/usr/include/python%python3_version% \
        -DWITH_ALEMBIC=ON \
        -DWITH_CODEC_FFMPEG=ON \
        -DWITH_CODEC_SNDFILE=ON \
        -DWITH_CYCLES_CUDA_BINARIES=ON \
        -DWITH_CYCLES_EMBREE=ON \
        -DWITH_CYCLES_HIP_BINARIES=ON \
        -DWITH_CYCLES_OSL=ON \
        -DWITH_FFTW3=ON \
        -DWITH_HARU=ON \
        -DWITH_IMAGE_OPENJPEG=ON \
        -DWITH_INSTALL_PORTABLE=OFF \
        -DWITH_JACK=ON \
        -DWITH_LLVM=ON \
        -DOPTIX_ROOT_DIR="$workdir/optix-headers" \
        -DWITH_OPENCOLORIO=ON \
        -DWITH_OPENIMAGEIO=ON \
        -DWITH_OPENSUBDIV=ON \
        -DWITH_OPENVDB=ON \
        -DWITH_POTRACE=ON \
        -DWITH_PULSEAUDIO=ON \
        -DWITH_PYTHON_INSTALL=OFF \
        -DWITH_SDL=ON \
        -DWITH_SYSTEM_GLEW=ON \
        -DWITH_SYSTEM_LZO=ON \
        -DWITH_USD=ON \
        -DWITH_X11_XINPUT=ON \
        -DCYCLES_HIP_BINARIES_ARCH="gfx803;gfx900;gfx902;gfx904;gfx906;gfx908;gfx90a;gfx90c;gfx1010;gfx1011;gfx1012;gfx1013;gfx1030;gfx1031;gfx1032;gfx1033;gfx1034;gfx1035;gfx1036;gfx1100;gfx1101;gfx1102;gfx1103"
build      : |
    %ninja_build
install    : |
    %ninja_install
    %python3_compile $installdir/usr/share/blender
    install -Dm00644 $pkgfiles/blender.thumbnailer -t $installdir/usr/share/thumbnailers
    rm -r $installdir/usr/share/doc/blender/license/
check      : |
    unzip $sources/BMW27.blend.zip

    # TODO(GZGavinZhao): some Python scripts/modules still can't be found at
    # runtime... Render still processes normally, but who knows if they will
    # cause issues in the future.
    # export PYTHONPATH=%installroot%/usr/lib/python%python3_version%/site-packages:$PWD
    # $installdir/usr/bin/blender -b BMW27.blend -f 0
    # TODO(GZGavinZhao): iGPUs require HSA_ENABLE_SDMA=0 to not hang. Enable
    # after we figure out how to do this automatically.
    # if [ -e /dev/kfd ]; then
    #     $installdir/usr/bin/blender -b BMW27.blend -f 0 -- --cycles-device HIP || true
    # fi
