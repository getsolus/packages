From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Reilly Brogan <reilly@reillybrogan.com>
Date: Sat, 20 Jul 2024 16:54:58 -0500
Subject: [PATCH] moss: Disable blsforme

---
 Cargo.lock              | 141 +---------------------------------------
 moss/Cargo.toml         |   2 +-
 moss/src/client/boot.rs |  94 +++++++++++++--------------
 moss/src/client/mod.rs  |   2 +-
 4 files changed, 52 insertions(+), 187 deletions(-)

diff --git a/Cargo.lock b/Cargo.lock
index 0140223..5a66f25 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -111,18 +111,6 @@ dependencies = [
  "windows-sys 0.52.0",
 ]
 
-[[package]]
-name = "arrayref"
-version = "0.3.7"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6b4930d2cb77ce62f89ee5d5289b4ac049559b1c45539271f5ed4fdc7db34545"
-
-[[package]]
-name = "arrayvec"
-version = "0.7.4"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "96d30a06541fbafbc7f82ed10c06164cfbd2c401138f6addd8404629c4b16711"
-
 [[package]]
 name = "async-compression"
 version = "0.4.11"
@@ -178,21 +166,6 @@ version = "2.6.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "b048fb63fd8b5923fc5aa7b340d8e156aec7ec02f0c78fa8a6ddc2613f6f71de"
 
-[[package]]
-name = "blake3"
-version = "1.5.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "30cca6d3674597c30ddf2c587bf8d9d65c9a84d2326d941cc79c9842dfe0ef52"
-dependencies = [
- "arrayref",
- "arrayvec",
- "cc",
- "cfg-if",
- "constant_time_eq",
- "memmap2",
- "rayon",
-]
-
 [[package]]
 name = "block-buffer"
 version = "0.10.4"
@@ -202,22 +175,6 @@ dependencies = [
  "generic-array",
 ]
 
-[[package]]
-name = "blsforme"
-version = "0.1.0"
-source = "git+https://github.com/serpent-os/blsforme.git?rev=59a8f12f7413c8eb3eaf9b8c56dea9c644fe4dab#59a8f12f7413c8eb3eaf9b8c56dea9c644fe4dab"
-dependencies = [
- "blake3",
- "gpt",
- "log",
- "nix 0.28.0",
- "serde",
- "serde_json",
- "superblock",
- "thiserror",
- "topology",
-]
-
 [[package]]
 name = "boulder"
 version = "0.1.0"
@@ -234,7 +191,7 @@ dependencies = [
  "hex",
  "itertools 0.13.0",
  "moss",
- "nix 0.27.1",
+ "nix",
  "regex",
  "serde",
  "serde_json",
@@ -307,12 +264,6 @@ version = "1.0.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd"
 
-[[package]]
-name = "cfg_aliases"
-version = "0.1.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "fd16c4719339c4530435d38e511904438d07cce7950afa3718a84ac36c10e89e"
-
 [[package]]
 name = "chrono"
 version = "0.4.38"
@@ -423,17 +374,11 @@ dependencies = [
  "windows-sys 0.52.0",
 ]
 
-[[package]]
-name = "constant_time_eq"
-version = "0.3.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f7144d30dcf0fafbce74250a3963025d8d52177934239851c917d29f1df280c2"
-
 [[package]]
 name = "container"
 version = "0.1.0"
 dependencies = [
- "nix 0.27.1",
+ "nix",
  "strum",
  "thiserror",
 ]
@@ -459,21 +404,6 @@ dependencies = [
  "libc",
 ]
 
-[[package]]
-name = "crc"
-version = "3.2.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "69e6e4d7b33a94f0991c26729976b10ebde1d34c3ee82408fb536164fa10d636"
-dependencies = [
- "crc-catalog",
-]
-
-[[package]]
-name = "crc-catalog"
-version = "2.4.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "19d374276b40fb8bbdee95aef7c7fa6b5316ec764510eb64b8dd0e2ed0d7e7f5"
-
 [[package]]
 name = "crc32fast"
 version = "1.4.2"
@@ -962,18 +892,6 @@ version = "0.3.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "d2fabcfbdc87f4758337ca535fb41a6d701b65693ce38287d856d1674551ec9b"
 
-[[package]]
-name = "gpt"
-version = "3.1.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8283e7331b8c93b9756e0cfdbcfb90312852f953c6faf9bf741e684cc3b6ad69"
-dependencies = [
- "bitflags",
- "crc",
- "log",
- "uuid",
-]
-
 [[package]]
 name = "h2"
 version = "0.4.5"
@@ -1328,15 +1246,6 @@ version = "2.7.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3"
 
-[[package]]
-name = "memmap2"
-version = "0.9.4"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "fe751422e4a8caa417e13c3ea66452215d7d63e19e604f4980461212f3ae1322"
-dependencies = [
- "libc",
-]
-
 [[package]]
 name = "migrations_internals"
 version = "2.2.0"
@@ -1395,7 +1304,6 @@ dependencies = [
 name = "moss"
 version = "0.1.0"
 dependencies = [
- "blsforme",
  "bytes",
  "chrono",
  "clap",
@@ -1411,7 +1319,7 @@ dependencies = [
  "itertools 0.13.0",
  "libsqlite3-sys",
  "log",
- "nix 0.27.1",
+ "nix",
  "rayon",
  "reqwest",
  "serde",
@@ -1440,18 +1348,6 @@ dependencies = [
  "libc",
 ]
 
-[[package]]
-name = "nix"
-version = "0.28.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ab2156c4fce2f8df6c499cc1c763e4394b7482525bf2a9701c9d79d215f519e4"
-dependencies = [
- "bitflags",
- "cfg-if",
- "cfg_aliases",
- "libc",
-]
-
 [[package]]
 name = "nom"
 version = "7.1.3"
@@ -2185,16 +2081,6 @@ version = "2.6.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "13c2bddecc57b384dee18652358fb23172facb8a2c51ccc10d74c157bdea3292"
 
-[[package]]
-name = "superblock"
-version = "0.1.0"
-source = "git+https://github.com/serpent-os/blsforme.git?rev=59a8f12f7413c8eb3eaf9b8c56dea9c644fe4dab#59a8f12f7413c8eb3eaf9b8c56dea9c644fe4dab"
-dependencies = [
- "log",
- "thiserror",
- "uuid",
-]
-
 [[package]]
 name = "syn"
 version = "2.0.69"
@@ -2388,18 +2274,6 @@ dependencies = [
  "winnow",
 ]
 
-[[package]]
-name = "topology"
-version = "0.1.0"
-source = "git+https://github.com/serpent-os/blsforme.git?rev=59a8f12f7413c8eb3eaf9b8c56dea9c644fe4dab#59a8f12f7413c8eb3eaf9b8c56dea9c644fe4dab"
-dependencies = [
- "gpt",
- "log",
- "nix 0.28.0",
- "superblock",
- "thiserror",
-]
-
 [[package]]
 name = "tower"
 version = "0.4.13"
@@ -2547,15 +2421,6 @@ version = "0.2.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "06abde3611657adf66d383f00b093d7faecc7fa57071cce2578660c9f1010821"
 
-[[package]]
-name = "uuid"
-version = "1.9.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5de17fd2f7da591098415cff336e12965a28061ddace43b59cb3c430179c9439"
-dependencies = [
- "getrandom",
-]
-
 [[package]]
 name = "vcpkg"
 version = "0.2.15"
diff --git a/moss/Cargo.toml b/moss/Cargo.toml
index e28045c..95f47ef 100644
--- a/moss/Cargo.toml
+++ b/moss/Cargo.toml
@@ -14,7 +14,7 @@ triggers = { path = "../crates/triggers" }
 tui = { path = "../crates/tui" }
 vfs = { path = "../crates/vfs" }
 
-blsforme.workspace = true
+# blsforme.workspace = true
 bytes.workspace = true
 chrono.workspace = true
 clap.workspace = true
diff --git a/moss/src/client/boot.rs b/moss/src/client/boot.rs
index bd8b5d2..8602b57 100644
--- a/moss/src/client/boot.rs
+++ b/moss/src/client/boot.rs
@@ -10,7 +10,7 @@ use std::{
     str::FromStr,
 };
 
-use blsforme::os_release::{self, OsRelease};
+// use blsforme::os_release::{self, OsRelease};
 use fnmatch::Pattern;
 use stone::payload::{layout, Layout};
 use thiserror::{self, Error};
@@ -19,14 +19,14 @@ use crate::{package::Id, Installation};
 
 #[derive(Debug, Error)]
 pub enum Error {
-    #[error("blsforme: {0}")]
-    Blsforme(#[from] blsforme::Error),
+    // #[error("blsforme: {0}")]
+    // Blsforme(#[from] blsforme::Error),
 
     #[error("io: {0}")]
     IO(#[from] io::Error),
 
-    #[error("os_release: {0}")]
-    OsRelease(#[from] os_release::Error),
+    // #[error("os_release: {0}")]
+    // OsRelease(#[from] os_release::Error),
 
     /// fnmatch pattern compilation for boot, etc.
     #[error("fnmatch pattern: {0}")]
@@ -103,57 +103,57 @@ fn boot_files_from_state<'a>(
     rets
 }
 
-pub fn synchronize(install: &Installation, layouts: &[(Id, Layout)]) -> Result<(), Error> {
-    let root = install.root.clone();
-    let is_native = root.to_string_lossy() == "/";
+// pub fn synchronize(install: &Installation, layouts: &[(Id, Layout)]) -> Result<(), Error> {
+//     let root = install.root.clone();
+//     let is_native = root.to_string_lossy() == "/";
     // Create an appropriate configuration
-    let config = blsforme::Configuration {
-        root: if is_native {
-            blsforme::Root::Native(root.clone())
-        } else {
-            blsforme::Root::Image(root.clone())
-        },
-        vfs: "/".into(),
-    };
-
-    let pattern = fnmatch::Pattern::from_str("lib/kernel/(version:*)/*")?;
-    let systemd = fnmatch::Pattern::from_str("lib*/systemd/boot/efi/*.efi")?;
-    let booty_bits = boot_files_from_state(install, layouts, &systemd);
+    // let config = blsforme::Configuration {
+    //     root: if is_native {
+    //         blsforme::Root::Native(root.clone())
+    //     } else {
+    //         blsforme::Root::Image(root.clone())
+    //     },
+    //     vfs: "/".into(),
+    // };
+
+    // let pattern = fnmatch::Pattern::from_str("lib/kernel/(version:*)/*")?;
+    // let systemd = fnmatch::Pattern::from_str("lib*/systemd/boot/efi/*.efi")?;
+    // let booty_bits = boot_files_from_state(install, layouts, &systemd);
 
     // No kernels? No bother.
-    let kernels = kernel_files_from_state(install, layouts, &pattern);
-    if kernels.is_empty() {
-        return Ok(());
-    }
+    // let kernels = kernel_files_from_state(install, layouts, &pattern);
+    // if kernels.is_empty() {
+    //     return Ok(());
+    // }
     // no fun times
-    if booty_bits.is_empty() {
-        return Ok(());
-    }
+    // if booty_bits.is_empty() {
+    //     return Ok(());
+    // }
 
     // Read the os-release file we created
-    let fp = fs::read_to_string(install.root.join("usr").join("lib").join("os-release"))?;
-    let os_release = OsRelease::from_str(&fp)?;
-    let schema = blsforme::Schema::Blsforme {
-        os_release: &os_release,
-    };
-    let discovered = schema.discover_system_kernels(kernels.iter())?;
+    // let fp = fs::read_to_string(install.root.join("usr").join("lib").join("os-release"))?;
+    // let os_release = OsRelease::from_str(&fp)?;
+    // let schema = blsforme::Schema::Blsforme {
+    //     os_release: &os_release,
+    // };
+    // let discovered = schema.discover_system_kernels(kernels.iter())?;
 
     // pipe all of our entries into blsforme
-    let entries = discovered.iter().map(blsforme::Entry::new);
+    // let entries = discovered.iter().map(blsforme::Entry::new);
 
     // If we can't get a manager, find, but don't bomb. Its probably a topology failure.
-    let manager = match blsforme::Manager::new(&config) {
-        Ok(m) => m.with_entries(entries).with_bootloader_assets(booty_bits),
-        Err(_) => return Ok(()),
-    };
+    // let manager = match blsforme::Manager::new(&config) {
+    //     Ok(m) => m.with_entries(entries).with_bootloader_assets(booty_bits),
+    //     Err(_) => return Ok(()),
+    // };
 
     // Only allow mounting pre-sync for a native run
-    if is_native {
-        let _mounts = manager.mount_partitions()?;
-        manager.sync(&schema)?;
-    } else {
-        manager.sync(&schema)?;
-    }
-
-    Ok(())
-}
+    // if is_native {
+    //     let _mounts = manager.mount_partitions()?;
+    //     manager.sync(&schema)?;
+    // } else {
+    //     manager.sync(&schema)?;
+    // }
+
+//     Ok(())
+// }
diff --git a/moss/src/client/mod.rs b/moss/src/client/mod.rs
index 62e4886..ae5091e 100644
--- a/moss/src/client/mod.rs
+++ b/moss/src/client/mod.rs
@@ -335,7 +335,7 @@ impl Client {
 
         // Last but not least, let us see some boot management on the current state
         let layouts = self.layout_db.query(state.selections.iter().map(|s| &s.package))?;
-        boot::synchronize(&self.installation, &layouts)?;
+        // boot::synchronize(&self.installation, &layouts)?;
 
         Ok(())
     }
