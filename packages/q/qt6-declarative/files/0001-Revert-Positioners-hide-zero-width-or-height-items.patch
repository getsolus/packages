From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Reilly Brogan <reilly@reillybrogan.com>
Date: Thu, 28 Aug 2025 21:51:08 -0500
Subject: [PATCH] Revert "Positioners: hide zero-width or height items"

This reverts commit 9927f5c0bbce31ac21135011f49e7a750692d9f2.
---
 src/quick/items/qquickpositioners.cpp         | 10 ---
 .../qquickpositioners/data/hiddenItems.qml    | 41 ------------
 .../tst_qquickpositioners.cpp                 | 65 -------------------
 .../data/zeroSizeWithRepeater.qml             | 13 ++--
 .../data/zeroSizeWithRepeaterInRow.qml        | 58 -----------------
 .../qquickcontainer/tst_qquickcontainer.cpp   | 48 +++++---------
 6 files changed, 22 insertions(+), 213 deletions(-)
 delete mode 100644 tests/auto/quick/qquickpositioners/data/hiddenItems.qml
 delete mode 100644 tests/auto/quickcontrols/qquickcontainer/data/zeroSizeWithRepeaterInRow.qml

diff --git a/src/quick/items/qquickpositioners.cpp b/src/quick/items/qquickpositioners.cpp
index 09c296d98b..b9619444a0 100644
--- a/src/quick/items/qquickpositioners.cpp
+++ b/src/quick/items/qquickpositioners.cpp
@@ -313,18 +313,11 @@ void QQuickBasePositioner::prePositioning()
         PositionedItem posItem(child);
         int wIdx = oldItems.find(posItem);
         if (wIdx < 0) {
-            // This is a newly added item.
             d->watchChanges(child);
             posItem.isNew = true;
             if (!childPrivate->explicitVisible || !child->width() || !child->height()) {
                 posItem.isVisible = false;
                 posItem.index = -1;
-                // If we hide a zero-width or height item by setting visible to false,
-                // the !childPrivate->explicitVisible will then always trigger. We can't
-                // overwrite what the user has set, and we don't want to introduce a separate
-                // flag to track whether the visible property was actually explicitly set so
-                // that we can implicitly set it, so instead we use culled for this.
-                childPrivate->setCulled(true);
                 unpositionedItems.append(posItem);
             } else {
                 posItem.index = positionedItems.count();
@@ -343,21 +336,18 @@ void QQuickBasePositioner::prePositioning()
 #endif
             }
         } else {
-            // This item already existed within us.
             PositionedItem *item = &oldItems[wIdx];
             // Items are only omitted from positioning if they are explicitly hidden
             // i.e. their positioning is not affected if an ancestor is hidden.
             if (!childPrivate->explicitVisible || !child->width() || !child->height()) {
                 item->isVisible = false;
                 item->index = -1;
-                childPrivate->setCulled(true);
                 unpositionedItems.append(*item);
             } else if (!item->isVisible) {
                 // item changed from non-visible to visible, treat it as a "new" item
                 item->isVisible = true;
                 item->isNew = true;
                 item->index = positionedItems.count();
-                childPrivate->setCulled(false);
                 positionedItems.append(*item);
 
 #if QT_CONFIG(quick_viewtransitions)
diff --git a/tests/auto/quick/qquickpositioners/data/hiddenItems.qml b/tests/auto/quick/qquickpositioners/data/hiddenItems.qml
deleted file mode 100644
index 814d45cd4f..0000000000
--- a/tests/auto/quick/qquickpositioners/data/hiddenItems.qml
+++ /dev/null
@@ -1,41 +0,0 @@
-import QtQuick
-
-Item {
-    width: 400
-    height: 400
-
-    component ZeroWidthItem: Item {
-        implicitWidth: 0
-        implicitHeight: 20
-    }
-
-    component ZeroHeightItem: Item {
-        implicitWidth: 20
-        implicitHeight: 0
-    }
-
-    Row {
-        objectName: "row"
-
-        ZeroWidthItem {}
-        ZeroHeightItem {}
-    }
-    Column {
-        objectName: "column"
-
-        ZeroWidthItem {}
-        ZeroHeightItem {}
-    }
-    Grid {
-        objectName: "grid"
-
-        ZeroWidthItem {}
-        ZeroHeightItem {}
-    }
-    Flow {
-        objectName: "flow"
-
-        ZeroWidthItem {}
-        ZeroHeightItem {}
-    }
-}
diff --git a/tests/auto/quick/qquickpositioners/tst_qquickpositioners.cpp b/tests/auto/quick/qquickpositioners/tst_qquickpositioners.cpp
index ccddb61f97..2992c4e9a8 100644
--- a/tests/auto/quick/qquickpositioners/tst_qquickpositioners.cpp
+++ b/tests/auto/quick/qquickpositioners/tst_qquickpositioners.cpp
@@ -78,8 +78,6 @@ private slots:
     void test_attachedproperties();
     void test_attachedproperties_data();
     void test_attachedproperties_dynamic();
-    void test_hiddenItems_data();
-    void test_hiddenItems();
 
     void populateTransitions_row();
     void populateTransitions_row_data();
@@ -3992,69 +3990,6 @@ void tst_qquickpositioners::test_attachedproperties_dynamic()
 
 }
 
-void tst_qquickpositioners::test_hiddenItems_data()
-{
-    QTest::addColumn<QString>("positionerObjectName");
-
-    QTest::newRow("row") << "row";
-    QTest::newRow("column") << "column";
-    QTest::newRow("grid") << "grid";
-    QTest::newRow("flow") << "flow";
-}
-
-void tst_qquickpositioners::test_hiddenItems()
-{
-    QFETCH(QString, positionerObjectName);
-
-    QScopedPointer<QQuickView> window(createView(testFile("hiddenItems.qml")));
-    QVERIFY(window->rootObject());
-
-    const auto *positioner = window->findChild<QQuickBasePositioner *>(positionerObjectName);
-    QVERIFY(positioner);
-
-    auto *zeroWidthItem = positioner->childItems().at(0);
-    QVERIFY(zeroWidthItem);
-    const auto *zeroWidthItemPrivate = QQuickItemPrivate::get(zeroWidthItem);
-    // Items should always be visible; it's only their culled state that should change;
-    // see comment in QQuickBasePositioner::prePositioning.
-    QVERIFY(zeroWidthItem->isVisible());
-    QVERIFY(zeroWidthItemPrivate->culled);
-
-    auto *zeroHeightItem = positioner->childItems().at(1);
-    QVERIFY(zeroHeightItem);
-    const auto *zeroHeightItemPrivate = QQuickItemPrivate::get(zeroHeightItem);
-    QVERIFY(zeroHeightItem->isVisible());
-    QVERIFY(zeroHeightItemPrivate->culled);
-
-    // Give the zero-width item a non-zero implicitWidth; it should become visible.
-    zeroWidthItem->setImplicitWidth(20);
-    QVERIFY(QQuickTest::qIsPolishScheduled(positioner));
-    QVERIFY(QQuickTest::qWaitForPolish(positioner));
-    QVERIFY(zeroWidthItem->isVisible());
-    QVERIFY(!zeroWidthItemPrivate->culled);
-
-    // Give it a zero implicitWidth again; it should be hidden.
-    zeroWidthItem->setImplicitWidth(0);
-    QVERIFY(QQuickTest::qIsPolishScheduled(positioner));
-    QVERIFY(QQuickTest::qWaitForPolish(positioner));
-    QVERIFY(zeroWidthItem->isVisible());
-    QVERIFY(zeroWidthItemPrivate->culled);
-
-    // Give the zero-height item a non-zero implicitHeight; it should become visible.
-    zeroHeightItem->setImplicitHeight(20);
-    QVERIFY(QQuickTest::qIsPolishScheduled(positioner));
-    QVERIFY(QQuickTest::qWaitForPolish(positioner));
-    QVERIFY(zeroHeightItem->isVisible());
-    QVERIFY(!zeroHeightItemPrivate->culled);
-
-    // Give it a zero implicitHeight again; it should be hidden.
-    zeroHeightItem->setImplicitHeight(0);
-    QVERIFY(QQuickTest::qIsPolishScheduled(positioner));
-    QVERIFY(QQuickTest::qWaitForPolish(positioner));
-    QVERIFY(zeroHeightItem->isVisible());
-    QVERIFY(zeroHeightItemPrivate->culled);
-}
-
 QQuickView *tst_qquickpositioners::createView(const QString &filename, bool wait)
 {
     QQuickView *window = new QQuickView(nullptr);
diff --git a/tests/auto/quickcontrols/qquickcontainer/data/zeroSizeWithRepeater.qml b/tests/auto/quickcontrols/qquickcontainer/data/zeroSizeWithRepeater.qml
index f490bcadf0..f78b6e273c 100644
--- a/tests/auto/quickcontrols/qquickcontainer/data/zeroSizeWithRepeater.qml
+++ b/tests/auto/quickcontrols/qquickcontainer/data/zeroSizeWithRepeater.qml
@@ -25,10 +25,7 @@ ApplicationWindow {
     }
 
     function addTextItem() {
-        container.addItem(textComponent.createObject(container, {
-            x: text3.x + text3.width,
-            text: "      4  "
-        }))
+        container.addItem(textComponent.createObject(container, { text: "      4  " }))
     }
 
     Item {
@@ -38,8 +35,10 @@ ApplicationWindow {
         Container {
             id: container
             anchors.fill: parent
-            contentItem: Repeater {
-                model: container.contentModel
+            contentItem: Row {
+                Repeater {
+                    model: container.contentModel
+                }
             }
 
             TextItem {
@@ -48,12 +47,10 @@ ApplicationWindow {
             }
             TextItem {
                 id: text2
-                x: text1.width
                 text: "  2      "
             }
             TextItem {
                 id: text3
-                x: text2.x + text2.width
                 text: "    3    "
             }
         }
diff --git a/tests/auto/quickcontrols/qquickcontainer/data/zeroSizeWithRepeaterInRow.qml b/tests/auto/quickcontrols/qquickcontainer/data/zeroSizeWithRepeaterInRow.qml
deleted file mode 100644
index a81d73a356..0000000000
--- a/tests/auto/quickcontrols/qquickcontainer/data/zeroSizeWithRepeaterInRow.qml
+++ /dev/null
@@ -1,58 +0,0 @@
-// Copyright (C) 2025 The Qt Company Ltd.
-// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GPL-3.0-only
-
-import QtQuick
-import QtQuick.Controls
-
-ApplicationWindow {
-    width: 640
-    height: 480
-
-    property alias container: container
-    property alias text1: text1
-    property alias text2: text2
-    property alias text3: text3
-
-    component TextItem: Text {
-        font.pointSize: 24
-        width: container.width
-        height: container.height
-    }
-
-    Component {
-        id: textComponent
-        TextItem {}
-    }
-
-    function addTextItem() {
-        container.addItem(textComponent.createObject(container, { text: "      4  " }))
-    }
-
-    Item {
-        id: root
-        objectName: "root"
-
-        Container {
-            id: container
-            anchors.fill: parent
-            contentItem: Row {
-                Repeater {
-                    model: container.contentModel
-                }
-            }
-
-            TextItem {
-                id: text1
-                text: "1        "
-            }
-            TextItem {
-                id: text2
-                text: "  2      "
-            }
-            TextItem {
-                id: text3
-                text: "    3    "
-            }
-        }
-    }
-}
diff --git a/tests/auto/quickcontrols/qquickcontainer/tst_qquickcontainer.cpp b/tests/auto/quickcontrols/qquickcontainer/tst_qquickcontainer.cpp
index 2fd1972b8d..f5b1593f88 100644
--- a/tests/auto/quickcontrols/qquickcontainer/tst_qquickcontainer.cpp
+++ b/tests/auto/quickcontrols/qquickcontainer/tst_qquickcontainer.cpp
@@ -32,20 +32,14 @@ tst_qquickcontainer::tst_qquickcontainer()
     QQuickStyle::setStyle("Basic");
 }
 
-enum ContentItemType {
-    View,
-    Repeater,
-    Positioner,
-};
-
 void tst_qquickcontainer::zeroSize_data()
 {
     QTest::addColumn<QString>("qmlFileName");
-    QTest::addColumn<ContentItemType>("contentItemType");
+    QTest::addColumn<bool>("isItemView");
 
-    QTest::newRow("ListView") << "zeroSizeWithListView.qml" << View;
-    QTest::newRow("Repeater") << "zeroSizeWithRepeater.qml" << Repeater;
-    QTest::newRow("Repeater in Row") << "zeroSizeWithRepeaterInRow.qml" << Positioner;
+    QTest::newRow("ListView") << "zeroSizeWithListView.qml" << true;
+    // See QQuickContainerPrivate::maybeCullItem for why this is false.
+    QTest::newRow("Repeater") << "zeroSizeWithRepeater.qml" << false;
 }
 
 // Tests that a zero-size Container with a QQuickItemView sub-class culls its items.
@@ -53,10 +47,7 @@ void tst_qquickcontainer::zeroSize_data()
 void tst_qquickcontainer::zeroSize()
 {
     QFETCH(QString, qmlFileName);
-    QFETCH(ContentItemType, contentItemType);
-
-    const bool isView = contentItemType == View;
-    const bool isPositioner = contentItemType == Positioner;
+    QFETCH(bool, isItemView);
 
     QQuickControlsApplicationHelper helper(this, qmlFileName);
     QVERIFY2(helper.ready, helper.failureMessage());
@@ -66,16 +57,15 @@ void tst_qquickcontainer::zeroSize()
 
     auto *text1 = helper.window->property("text1").value<QQuickItem *>();
     QVERIFY(text1);
-    // Since the items also have zero sizes, they will also be culled by positioners.
-    QCOMPARE(QQuickItemPrivate::get(text1)->culled, isView || isPositioner);
+    QCOMPARE(QQuickItemPrivate::get(text1)->culled, isItemView);
 
     auto *text2 = helper.window->property("text2").value<QQuickItem *>();
     QVERIFY(text2);
-    QCOMPARE(QQuickItemPrivate::get(text2)->culled, isView || isPositioner);
+    QCOMPARE(QQuickItemPrivate::get(text2)->culled, isItemView);
 
     auto *text3 = helper.window->property("text3").value<QQuickItem *>();
     QVERIFY(text3);
-    QCOMPARE(QQuickItemPrivate::get(text3)->culled, isView || isPositioner);
+    QCOMPARE(QQuickItemPrivate::get(text3)->culled, isItemView);
 
     // Add an item and check that it's culled appropriately.
     QVERIFY(QMetaObject::invokeMethod(helper.window, "addTextItem"));
@@ -83,16 +73,12 @@ void tst_qquickcontainer::zeroSize()
     QVERIFY(container);
     auto *text4 = container->itemAt(3);
     QVERIFY(text4);
-    if (isView || isPositioner) {
-        QVERIFY(QQuickTest::qIsPolishScheduled(helper.window));
-        QVERIFY(QQuickTest::qWaitForPolish(helper.window));
-    }
-    QCOMPARE(QQuickItemPrivate::get(text4)->culled, isView || isPositioner);
+    QCOMPARE(QQuickItemPrivate::get(text4)->culled, isItemView);
 
     // Give it a non-zero size (via its parent, which it fills).
     container->parentItem()->setWidth(text1->implicitWidth());
     container->parentItem()->setHeight(text1->implicitHeight());
-    if (isView || isPositioner) {
+    if (isItemView) {
         QVERIFY(QQuickTest::qIsPolishScheduled(helper.window));
         QVERIFY(QQuickTest::qWaitForPolish(helper.window));
     }
@@ -100,20 +86,20 @@ void tst_qquickcontainer::zeroSize()
     // This one won't be culled for views either, because of cacheBuffer (and
     // clipping apparently doesn't affect culling, if we were to set clip to true).
     QCOMPARE(QQuickItemPrivate::get(text2)->culled, false);
-    QCOMPARE(QQuickItemPrivate::get(text3)->culled, isView);
-    QCOMPARE(QQuickItemPrivate::get(text4)->culled, isView);
+    QCOMPARE(QQuickItemPrivate::get(text3)->culled, isItemView);
+    QCOMPARE(QQuickItemPrivate::get(text4)->culled, isItemView);
 
     // Go back to a zero size.
     container->parentItem()->setWidth(0);
     container->parentItem()->setHeight(0);
-    if (isView || isPositioner) {
+    if (isItemView) {
         QVERIFY(QQuickTest::qIsPolishScheduled(helper.window));
         QVERIFY(QQuickTest::qWaitForPolish(helper.window));
     }
-    QCOMPARE(QQuickItemPrivate::get(text1)->culled, isView || isPositioner);
-    QCOMPARE(QQuickItemPrivate::get(text2)->culled, isView || isPositioner);
-    QCOMPARE(QQuickItemPrivate::get(text3)->culled, isView || isPositioner);
-    QCOMPARE(QQuickItemPrivate::get(text4)->culled, isView || isPositioner);
+    QCOMPARE(QQuickItemPrivate::get(text1)->culled, isItemView);
+    QCOMPARE(QQuickItemPrivate::get(text2)->culled, isItemView);
+    QCOMPARE(QQuickItemPrivate::get(text3)->culled, isItemView);
+    QCOMPARE(QQuickItemPrivate::get(text4)->culled, isItemView);
 }
 
 QTEST_MAIN(tst_qquickcontainer)
