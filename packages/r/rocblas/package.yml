name       : rocblas
version    : 4.2.4
release    : 7
source     :
    - git|https://github.com/ROCm/rocBLAS.git: 3171316ae7f642952fccbffc2ae0368bf67394f5
    - https://github.com/ROCm/Tensile/archive/refs/tags/rocm-6.2.4.tar.gz#tensile.tar.gz : dd0721e4371c8752aa4b14362f75d7ebb7805f57dcb990e03ae08cef4a291383
homepage   : https://github.com/ROCmSoftwarePlatform/rocBLAS
license    : MIT
component  : programming.library
summary    : Next generation BLAS implementation for ROCm platform
description: |
    rocBLAS is the AMD library for Basic Linear Algebra Subprograms (BLAS) on the ROCm platform. It is implemented in the HIP programming language and optimized for AMD GPUs.
builddeps  :
    - msgpack-cxx
    - python-joblib
    - python-msgpack
    - python-wheel
    - libboost-devel
    - rocm-cmake
    - rocm-hip
    - virtualenv
environment: |
    export CXXFLAGS="${CXXFLAGS/-D_FORTIFY_SOURCE=2 -fstack-protector-strong --param=ssp-buffer-size=32/-fcf-protection=none}"
    # Too noisy
    export CXXFLAGS+=" -w"

    export ROCM_PATH=/usr
    export DEVICE_LIB_PATH=/usr/lib64/amdgcn/bitcode
    export HIP_CLANG_PATH=/usr/lib64/llvm-rocm/bin
    export CMAKE_PREFIX_PATH=/usr/lib64/llvm-rocm
    export TENSILE_ROCM_ASSEMBLER_PATH=$HIP_CLANG_PATH/clang
    export TENSILE_ROCM_OFFLOAD_BUNDLER_PATH=$HIP_CLANG_PATH/clang-offload-bundler
    export HIPCC_COMPILE_FLAGS_APPEND="-parallel-jobs=4"

    # Speed up the build
    unset LD_PRELOAD

    if [ -e /usr/bin/sccache ]; then
        export HIP_CLANG_LAUNCHER=/usr/bin/sccache
    fi
setup      : |
    mkdir tensile
    tar xf $sources/tensile.tar.gz --strip-components=1 -C tensile
    pushd tensile
        %patch -p1 -i $pkgfiles/0001-Extend-Tensile-HIP-ISA-compatibility.patch
    popd

    %patch -p1 -i $pkgfiles/0001-Extend-rocBLAS-HIP-ISA-compatibility.patch
    %cmake_ninja -Wno-dev -L \
      -DCMAKE_C_COMPILER=hipcc \
      -DCMAKE_CXX_COMPILER=hipcc \
      -DCMAKE_INSTALL_LIBDIR=lib%LIBSUFFIX% \
      -DROCM_SYMLINK_LIBS=OFF \
      -Dpython="/usr/bin/python3" \
      -DBUILD_CLIENTS_TESTS=OFF \
      -DBUILD_CLIENTS_BENCHMARKS=OFF \
      -DBUILD_CLIENTS_SAMPLES=OFF \
      -DBUILD_TESTING=OFF \
      -DBUILD_WITH_TENSILE=ON \
      -DTensile_PRINT_DEBUG=ON \
      -DTensile_LIBRARY_FORMAT=msgpack \
      -DTensile_CPU_THREADS=$((%YJOBS% / 4)) \
      -DTensile_TEST_LOCAL_PATH=$workdir/tensile \
      -DAMDGPU_TARGETS="%AMDGPUTARGETS%"
build      : |
    %ninja_build -j $((%YJOBS% / 4))
install    : |
    %ninja_install
