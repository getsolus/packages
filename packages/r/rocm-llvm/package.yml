name       : rocm-llvm
version    : 6.2.4
release    : 4
source     :
    - https://github.com/ROCm/llvm-project/archive/refs/tags/rocm-6.2.4.tar.gz : 7af782bf5835fcd0928047dbf558f5000e7f0207ca39cf04570969343e789528
    # - https://github.com/ROCm/hip-tests/archive/refs/tags/rocm-6.0.0.tar.gz#hip-tests-6.0.0.tar.gz : e8f92a0f5d1f6093ca1fb24ff1b7140128900fcdc6e9f01f153d6907e5c2d807
homepage   : https://github.com/ROCm/llvm-project
license    : Apache-2.0-with-LLVM-exception
summary    : ROCm's patched LLVM
component  : programming.devel
libsplit   : false
description: |
    The LLVM package contains a collection of modular and reusable compiler and toolchain technologies. The Low Level Virtual Machine (LLVM) Core libraries provide a modern source and target-independent optimizer, along with code generation support for many popular CPUs (as well as some less common ones!). These libraries are built around a well specified code representation known as the LLVM intermediate representation ("LLVM IR").
clang      : true
builddeps  :
    - pkgconfig(libdrm_amdgpu)
    - pkgconfig(libzstd)
    - pkgconfig(numa)
    - binutils-devel
rundeps    :
    - zstd-devel
# checkdeps  :
#     - rocm-hip
environment: |
    # Decontaminate build environment
    unset LDFLAGS
    unset LD_AS_NEEDED
    unset CFLAGS
    unset CXXFLAGS

    export _PROJECTS="clang;clang-tools-extra;lld;llvm"
    export _RUNTIMES="compiler-rt"
    export _TARGETS="X86;AMDGPU;NVPTX"

    # Set common build options here
    export CMAKE_COMMON_OPTIONS="
        -DCMAKE_SKIP_RPATH=ON \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=%libdir%/llvm-rocm \
        -DCLANG_DEFAULT_LINKER=lld \
        -DCLANG_DEFAULT_OBJCOPY=llvm-objcopy \
        -DCLANG_DEFAULT_PIE_ON_LINUX=ON \
        -DENABLE_EXPERIMENTAL_NEW_PASS_MANAGER=ON \
        -DLLVM_INSTALL_UTILS=OFF \
        -DLLVM_INCLUDE_TESTS=OFF \
        -DLLVM_BINUTILS_INCDIR=/usr/include \
        -DLLVM_CONFIG=%libdir%/llvm-rocm/bin/llvm-config
        -DLLVM_ENABLE_FFI=ON \
        -DLLVM_ENABLE_ZLIB=ON \
        -DLLVM_ENABLE_ZSTD=ON \
        -DLLVM_ENABLE_RTTI=ON \
        -DLLVM_ENABLE_ASSERTIONS=OFF \
        -DLLVM_ENABLE_BINDINGS=OFF \
        -DENABLE_LINKER_BUILD_ID=ON \
        -DLLVM_ENABLE_PIC=ON \
        -DLLVM_BUILD_LLVM_DYLIB=OFF \
        -DLLVM_LINK_LLVM_DYLIB=OFF \
        -DCLANG_LINK_CLANG_DYLIB=OFF"

    # Used by everything except emul32 build
    export CMAKE_X86_64_OPTIONS="
         -DLLVM_DEFAULT_TARGET_TRIPLE=%HOST% \
         -DLLVM_TARGET_ARCH=x86_64 \
         -DLLVM_LIBDIR_SUFFIX=%LIBSUFFIX% \
         -DLIB_SUFFIX=%LIBSUFFIX%"

    # For profiling
    export PGO_INSTALL_DIR=$workdir/pgo-use
    export OFFLOAD_ARCH_STR=$(echo "%AMDGPUTARGETS%" | awk '{ gsub("gfx", "--offload-arch=gfx"); gsub(";", " "); print }')
    export ROCM_PATH=/usr
    export HIP_PATH=/usr
    export HIP_PLATFORM=amd
    export HIP_RUNTIME=amd
    export HIP_DEVICE_LIB_PATH=/usr/lib64/amdgcn/bitcode
    export HIP_CLANG_PATH=$PGO_INSTALL_DIR/bin
    export HIP_ROCCLR_HOME=$PGO_INSTALL_DIR
    export HIP_TESTS_DIR=$workdir/hip-tests-6.0.0
    # I don't know why LLVM stores the profile data there, but they're there
    export PROF_DIR=/home/build/YPKG/root/rocm-llvm/pgo
# TODO(GZGavinZhao): maybe build openmp as well after bootstrapping?
setup      : |
    # Just annoying.
    %patch -p1 -i $pkgfiles/0001-Silently-ignore-copy-dt-needed-entries.patch
    # Support solus, it's triplet, etc.
    %patch -p1 -i $pkgfiles/0001-Support-solus-as-a-distro.patch
    # Allow us to force ignore -Werror
    %patch -p1 -i $pkgfiles/ignore-werror.patch
    # # This warning appears during profiling phase, not sure if it affects
    # # profile data generation
    # %patch -p1 -i $pkgfiles/fix-inconsistent-md5-checksum.patch

    # Patch cfe for Solus specific options
    pushd clang
        %patch -p1 -i $pkgfiles/0001-cfe-Use-correct-Solus-multilib-paths.patch
    popd

    # Pull lld in line with binutils linkers for consistency
    pushd lld
        %patch -p1 -i $pkgfiles/0001-Enable-as-needed-with-LD_AS_NEEDED-variable.patch
        %patch -p1 -i $pkgfiles/0002-Make-gnuhash-the-default-when-not-specified.patch
    popd

    # This API is required to extend HIP ISA compatibility for compressed GPU
    # code object bundles (used in composable_kernel, rocSOLVER, and MIOpen)
    %patch -p1 -i $pkgfiles/0001-ClangOffloadBundler-Add-GetBundleIDsInFile-to-Offloa.patch

    %cmake_ninja -S llvm -L $CMAKE_X86_64_OPTIONS \
                 $CMAKE_COMMON_OPTIONS \
                 -DLLVM_ENABLE_PROJECTS=$_PROJECTS \
                 -DLLVM_ENABLE_RUNTIMES=$_RUNTIMES \
                 -DLLVM_TARGETS_TO_BUILD=$_TARGETS \
                 -DLLVM_BUILD_DOCS=OFF \
                 # -DCMAKE_C_FLAGS="-fprofile-instr-generate=default-%m.profraw" \
                 # -DCMAKE_CXX_FLAGS="-fprofile-instr-generate=default-%m.profraw" \
                 # -DCMAKE_INSTALL_PREFIX=$PGO_INSTALL_DIR \
# build      : |
#     # ninja -C solusBuildDir install %JOBS%
#     # cp -TRv $PGO_INSTALL_DIR/lib $PGO_INSTALL_DIR/lib64
# profile    : |
#     mkdir -p $HIP_TESTS_DIR
#     tar --strip-components=1 -C $HIP_TESTS_DIR -xf $sources/hip-tests-6.0.0.tar.gz
#     pushd $HIP_TESTS_DIR
#         %patch -p1 -i $pkgfiles/hip-tests.diff
#     popd
#
#     %cmake_ninja -B profile -S $HIP_TESTS_DIR/catch -L \
#       -DOFFLOAD_ARCH_STR="$OFFLOAD_ARCH_STR" \
#       -DHIP_PLATFORM=$HIP_PLATFORM \
#       -DROCM_PATH=$ROCM_PATH
#
#     %ninja_build -C profile build_tests
#
#     llvm-profdata merge -output=$PROF_DIR/code.profdata $PROF_DIR/default-*.profraw
install    : |
    rm -rf solusBuildDir
    %cmake_ninja -S llvm -L $CMAKE_X86_64_OPTIONS \
                 $CMAKE_COMMON_OPTIONS \
                 -DLLVM_ENABLE_PROJECTS=$_PROJECTS \
                 -DLLVM_ENABLE_RUNTIMES=$_RUNTIMES \
                 -DLLVM_TARGETS_TO_BUILD=$_TARGETS \
                 -DLLVM_BUILD_DOCS=OFF \
                 # -DCMAKE_C_FLAGS="-fprofile-instr-use=$PROF_DIR/code.profdata" \
                 # -DCMAKE_CXX_FLAGS="-fprofile-instr-use=$PROF_DIR/code.profdata"

    %ninja_install

    cp -TRv $installdir/usr/lib64/llvm-rocm/lib $installdir/usr/lib64/llvm-rocm/lib64
    rm -rf $installdir/usr/lib64/llvm-rocm/lib
