diff --git a/aclocal.m4 b/aclocal.m4
index 26b0ed27e80cbbaa..568abec17ec2a0c7 100644
--- a/aclocal.m4
+++ b/aclocal.m4
@@ -787,10 +787,11 @@ AC_CACHE_VAL(bash_cv_func_sigsetjmp,
 #include <signal.h>
 #include <setjmp.h>
 
+int
 main()
 {
 #if !defined (_POSIX_VERSION) || !defined (HAVE_POSIX_SIGNALS)
-exit (1);
+return 1;
 #else
 
 int code;
@@ -806,7 +807,7 @@ sigprocmask(SIG_BLOCK, (sigset_t *)NULL, &oset);
 /* save it */
 code = sigsetjmp(xx, 1);
 if (code)
-  exit(0);	/* could get sigmask and compare to oset here. */
+  return 0;	/* could get sigmask and compare to oset here. */
 
 /* change it */
 sigaddset(&set, SIGINT);
@@ -814,7 +815,7 @@ sigprocmask(SIG_BLOCK, &set, (sigset_t *)NULL);
 
 /* and siglongjmp */
 siglongjmp(xx, 10);
-exit(1);
+return 1;
 #endif
 }], bash_cv_func_sigsetjmp=present, bash_cv_func_sigsetjmp=missing,
     [AC_MSG_WARN(cannot check for sigsetjmp/siglongjmp if cross-compiling -- defaulting to missing)
@@ -835,7 +836,11 @@ AC_CACHE_VAL(bash_cv_func_strcoll_broken,
 #if defined (HAVE_LOCALE_H)
 #include <locale.h>
 #endif
+#if defined (HAVE_STRING_H)
+#include <string.h>
+#endif
 
+int
 main(c, v)
 int     c;
 char    *v[];
@@ -863,7 +868,7 @@ char    *v[];
         /* Exit with 1 (failure) if these two values are both > 0, since
 	   this tests whether strcoll(3) is broken with respect to strcmp(3)
 	   in the default locale. */
-	exit (r1 > 0 && r2 > 0);
+	return (r1 > 0 && r2 > 0);
 }
 ], bash_cv_func_strcoll_broken=yes, bash_cv_func_strcoll_broken=no,
    [AC_MSG_WARN(cannot check strcoll if cross compiling -- defaulting to no)
@@ -1334,13 +1339,14 @@ int s;
   nsigint++;
 }
 
+int
 main()
 {
 	nsigint = 0;
 	set_signal_handler(SIGINT, sigint);
 	kill((int)getpid(), SIGINT);
 	kill((int)getpid(), SIGINT);
-	exit(nsigint != 2);
+	return nsigint != 2;
 }
 ], bash_cv_must_reinstall_sighandlers=no, bash_cv_must_reinstall_sighandlers=yes,
    [AC_MSG_WARN(cannot check signal handling if cross compiling -- defaulting to no)
@@ -1773,6 +1779,7 @@ bash_cv_wcwidth_broken,
 #include <locale.h>
 #include <wchar.h>
 
+int
 main(c, v)
 int     c;
 char    **v;
@@ -1928,6 +1935,7 @@ AC_CACHE_VAL(bash_cv_func_ctype_nonascii,
 #include <stdio.h>
 #include <ctype.h>
 
+int
 main(c, v)
 int	c;
 char	*v[];
@@ -1949,7 +1957,7 @@ char	*v[];
 	r1 = isprint(x);
 	x -= 128;
 	r2 = isprint(x);
-	exit (r1 == 0 || r2 == 0);
+	return r1 == 0 || r2 == 0;
 }
 ], bash_cv_func_ctype_nonascii=yes, bash_cv_func_ctype_nonascii=no,
    [AC_MSG_WARN(cannot check ctype macros if cross compiling -- defaulting to no)
diff --git a/configure b/configure
index 002bcf07a6503b6f..3b180725df6c67c0 100755
--- a/configure
+++ b/configure
@@ -5056,13 +5056,14 @@ int s;
   nsigint++;
 }
 
+int
 main()
 {
 	nsigint = 0;
 	set_signal_handler(SIGINT, sigint);
 	kill((int)getpid(), SIGINT);
 	kill((int)getpid(), SIGINT);
-	exit(nsigint != 2);
+	return nsigint != 2;
 }
 
 _ACEOF
@@ -5107,10 +5108,11 @@ else
 #include <signal.h>
 #include <setjmp.h>
 
+int
 main()
 {
 #if !defined (_POSIX_VERSION) || !defined (HAVE_POSIX_SIGNALS)
-exit (1);
+return 1;
 #else
 
 int code;
@@ -5126,7 +5128,7 @@ sigprocmask(SIG_BLOCK, (sigset_t *)NULL, &oset);
 /* save it */
 code = sigsetjmp(xx, 1);
 if (code)
-  exit(0);	/* could get sigmask and compare to oset here. */
+  return 0;	/* could get sigmask and compare to oset here. */
 
 /* change it */
 sigaddset(&set, SIGINT);
@@ -5134,7 +5136,7 @@ sigprocmask(SIG_BLOCK, &set, (sigset_t *)NULL);
 
 /* and siglongjmp */
 siglongjmp(xx, 10);
-exit(1);
+return 1;
 #endif
 }
 _ACEOF
@@ -5209,7 +5211,11 @@ else
 #if defined (HAVE_LOCALE_H)
 #include <locale.h>
 #endif
+#if defined (HAVE_STRING_H)
+#include <string.h>
+#endif
 
+int
 main(c, v)
 int     c;
 char    *v[];
@@ -5237,7 +5243,7 @@ char    *v[];
         /* Exit with 1 (failure) if these two values are both > 0, since
 	   this tests whether strcoll(3) is broken with respect to strcmp(3)
 	   in the default locale. */
-	exit (r1 > 0 && r2 > 0);
+	return (r1 > 0 && r2 > 0);
 }
 
 _ACEOF
@@ -5280,6 +5286,7 @@ else
 #include <stdio.h>
 #include <ctype.h>
 
+int
 main(c, v)
 int	c;
 char	*v[];
@@ -5301,7 +5308,7 @@ char	*v[];
 	r1 = isprint(x);
 	x -= 128;
 	r2 = isprint(x);
-	exit (r1 == 0 || r2 == 0);
+	return r1 == 0 || r2 == 0;
 }
 
 _ACEOF
@@ -6337,6 +6344,7 @@ else
 #include <locale.h>
 #include <wchar.h>
 
+int
 main(c, v)
 int     c;
 char    **v;
