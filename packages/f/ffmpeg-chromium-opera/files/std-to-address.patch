From 44a3670c5b88dbeb762dff2c70eaf5ca28bf3b7d Mon Sep 17 00:00:00 2001
From: Troy Harvey <harveydevel@gmail.com>
Date: Sat, 10 Feb 2024 13:27:49 +1100
Subject: [PATCH] std to address

Signed-off-by: Troy Harvey <harveydevel@gmail.com>
---
 mojo/public/cpp/bindings/type_converter.h | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

diff --git a/mojo/public/cpp/bindings/type_converter.h b/mojo/public/cpp/bindings/type_converter.h
index c2edc87..3b99487 100644
--- a/mojo/public/cpp/bindings/type_converter.h
+++ b/mojo/public/cpp/bindings/type_converter.h
@@ -95,13 +95,16 @@ inline T ConvertTo(U* obj) {
   return TypeConverter<T, std::remove_cv_t<U>*>::Convert(obj);
 }
 
+template <class T> constexpr T *clang_to_address(T *P) { return P; }
+template <class T> auto clang_to_address(const T &P) -> decltype(P.operator->()) { return P.operator->(); }
+
 template <typename T, typename U>
   requires requires(const U& obj) {
     not std::is_pointer_v<U>;
-    { mojo::ConvertTo<T>(std::to_address(obj)) } -> std::same_as<T>;
+    { mojo::ConvertTo<T>(clang_to_address(obj)) } -> std::same_as<T>;
   }
 inline T ConvertTo(const U& obj) {
-  return mojo::ConvertTo<T>(std::to_address(obj));
+  return mojo::ConvertTo<T>(clang_to_address(obj));
 }
 
 template <typename T, typename U>
-- 
2.43.0

