name       : pytorch
version    : 2.7.1
release    : 37
source     :
    - https://github.com/pytorch/pytorch/releases/download/v2.7.1/pytorch-v2.7.1.tar.gz : 5befd2e540fd55ce4782d0ca7610ce5b572d756d7ea38090ef0f3c7c428fb20f
homepage   : https://pytorch.org/
license    : BSD-3-Clause
component  :
    - programming.python
    - ^libtorch : programming.library
summary    :
    - Tensors and Dynamic neural networks in Python with strong GPU acceleration
    - ^libtorch : PyTorch C++ API
description: |
    PyTorch is an optimized tensor library for deep learning using GPUs and CPUs.
patterns   :
    - ^libtorch :
        - /usr/lib64
    - ^libtorch-devel :
        - /usr/lib64/cmake
        - /usr/include
avx2       : true
networking : true
# clang      : true
ccache     : false
builddeps  :
    - pkgconfig(eigen3)
    - pkgconfig(fftw3)
    - pkgconfig(hiredis)
    - pkgconfig(lapack)
    - pkgconfig(libglog)
    - pkgconfig(libuv)
    - pkgconfig(libzmq)
    - pkgconfig(ompi)
    - pkgconfig(openblas)
    - pkgconfig(opencv4)
    - pkgconfig(protobuf)
    - pkgconfig(python3)
    - pkgconfig(rocksdb)
    - pkgconfig(shaderc)
    - pkgconfig(vulkan)
    - intel-tbb-devel
    - leveldb-devel
    - lmdb-devel
    - numpy
    - git
    # - onednn-devel # FIXME: If you have more RAM than I do please test if you don't get a ZIP64 Extensions requirement
    - openssl-11-devel
    - pybind11
    - python-build
    - python-installer
    - python-typing-extensions
    - python-setuptools
    - python-six
    - python-wheel
    - pyyaml
    - vulkan-headers

    # ROCm packages
    - pkgconfig(numa)
    - pkgconfig(libhsakmt)
    - rocm-core-devel
    - rocm-cmake
    - rocm-hip
    - hipblas-devel
    - hipblaslt-devel
    - hipcub
    - hipfft-devel
    - hipsolver-devel
    - hipsparse-devel
    - hipmagma-devel
    - miopen-devel
    - miopengemm-devel
    - rccl-devel
    - rocblas-devel
    - rocfft-devel
    - rocprim
    - rocrand-devel
    - hiprand-devel
    - rocprofiler
    - rocsolver-devel
    - rocsparse-devel
    - rocthrust
    - roctracer-devel
rundeps    :
    - numpy
    - python-cffi
    - python-future
    - python-protobuf
    - python-typing-extensions
    - pyyaml
    - sympy
    - ^libtorch :
        - pybind11
    - ^libtorch-devel :
        - gflags-devel
        - glog-devel
        - intel-tbb-devel
        - libtorch
        # ROCm packages
        - rocm-core-devel
        - rocm-hip
        - hipblas-devel
        - hipblaslt-devel
        - hipcub
        - hipfft-devel
        - hipsolver-devel
        - hipsparse-devel
        - hipmagma-devel
        - miopen-devel
        - miopengemm-devel
        - rccl-devel
        - rocblas-devel
        - rocfft-devel
        - rocprim
        - rocrand-devel
        - hiprand-devel
        - rocprofiler
        - rocsolver-devel
        - rocsparse-devel
        - rocthrust
        - roctracer-devel
replaces   :
    - ^libtorch-devel :
        - pytorch-devel
environment: |
    export PYTHON_BIN_PATH=/usr/bin/python3

    # USE_CCACHE=0 allows us to handle caching by ourselves, in particular
    # allowing us to cache HIP compilations with sccache.
    export BLAS=OpenBLAS \
        BUILD_BINARY=1 \
        BUILD_CUSTOM_PROTOBUF=0 \
        BUILD_TEST=0 \
        HAVE_SOVERSION=1 \
        USE_CCACHE=0 \
        USE_CUDA=0 \
        USE_DISTRIBUTED=1 \
        USE_FLASH_ATTENTION=0 \
        USE_FBGEMM=0 \
        USE_GFLAGS=1 \
        USE_GLOG=1 \
        USE_LAPACK=1 \
        USE_NCCL=0 \
        USE_MAGMA=1 \
        USE_MEM_EFF_ATTENTION=0 \
        USE_MKLDNN=0 \
        USE_BLAS=1 \
        USE_ROCM=0 \
        USE_REDIS=1 \
        USE_TBB=1 \
        USE_VULKAN=1 \
        USE_XPU=0 \
        USE_SYSTEM_EIGEN_INSTALL=1 \
        USE_SYSTEM_PYBIND11=1 \
        REL_WITH_DEB_INFO=1 \

    export ROCM_PATH=/usr
    export HIP_PATH=$ROCM_PATH
    export ROCM_SOURCE_DIR=$ROCM_PATH
    export HIP_COMPILER=clang
    export HIP_RUNTIME=amd
    export HIP_ROCCLR_HOME=/usr/lib64/llvm-rocm
    export HIP_CLANG_PATH=/usr/lib64/llvm-rocm/bin
    export HIP_CXX_COMPILER=/usr/bin/hipcc
    export HIP_DEVICE_LIB_PATH="/usr/lib64/amdgcn/bitcode"
    export DEVICE_LIB_PATH=$HIP_DEVICE_LIB_PATH
    export AMDGPU_TARGETS="%AMDGPUTARGETS%"
    export GPU_TARGETS="$AMDGPU_TARGETS"
    export PYTORCH_ROCM_ARCH="$AMDGPU_TARGETS"
    export HIP_CLANG_LAUNCHER=/usr/bin/sccache
    # export HIPCC_COMPILE_FLAGS_APPEND="-parallel-jobs=4"

    # Needs llvm in order to find system zstd
    export CMAKE_MODULE_PATH="/usr/lib64/cmake/hip;/usr/lib64/cmake/llvm"

    # # Cannot compile C code with clang due to https://github.com/pytorch/pytorch/issues/103222
    export CC=gcc
    export CXXFLAGS="${CXXFLAGS/-D_FORTIFY_SOURCE=2 -fstack-protector-strong --param=ssp-buffer-size=32/-fcf-protection=none}"
    # Too noisy
    export CFLAGS+=" -w"
    export CXXFLAGS+=" -w"
    export HIPCC_COMPILE_FLAGS_APPEND+=" -w"

    # Set it in case your computer starts chocking horribly
    # export MAX_JOBS=$((%YJOBS%/4))
    export MAX_JOBS=%YJOBS%
    # For packagers. The default 5G is barely enough for a single build.
    # export CCACHE_MAXSIZE=20G
setup      : |
    echo %version% > version.txt

    # Make sure lapack is detected.
    sed -i 's|(BLAS_INFO STREQUAL "generic")|TRUE|' cmake/Modules/FindLAPACK.cmake

    # The CMake option HIP_CXX_COMPILER is set by default to CMAKE_CXX_COMPILER
    # by HIP, so we have to cheeze this option to CMake using PyTorch existing
    # code for setting the CUDA compiler. This will also work when PyTorch
    # decides to switch to native HIP support in CMake.
    sed -i 's|CUDA_NVCC_EXECUTABLE|HIP_CXX_COMPILER|' tools/setup_helpers/cmake.py
    sed -i 's|CMAKE_CUDA_COMPILER|HIP_CXX_COMPILER|' tools/setup_helpers/cmake.py
    sed -i 's|CUDACXX|HIPCXX|' tools/setup_helpers/cmake.py

    sed -i -e 's@    checkout_nccl()@#    checkout_nccl()@' tools/build_pytorch_libs.py

    %patch -p1 -i $pkgfiles/gcc-15.patch
    sed -i 's|Python_EXECUTABLE=sys.executable,|Python_EXECUTABLE=sys.executable,PYTHON_EXECUTABLE=sys.executable,|' tools/setup_helpers/cmake.py
    sed -i 's|caffe2_hip_binary_target("hip/inspect_gpu.cc")||' binaries/CMakeLists.txt
    python3 ./tools/amd_build/build_amd.py

    %patch -p1 -i $pkgfiles/rocm-jit.patch
build      : |
    %python3_setup --skip-dependency-check
install    : |
    %python3_install

    # Configure libtorch
    install -dm00755 $installdir/%libdir%
    TORCH_PATH=/usr/lib/python%python3_version%/site-packages/torch
    mv $installdir/$TORCH_PATH/lib/* $installdir%libdir%

    if [ ! -z "${AVX2BUILD}" ]; then
        rm -rf $installdir/usr/lib/python*
    else
        install -dm00755 $installdir/usr/include $installdir/%libdir%/cmake
        mv $installdir/$TORCH_PATH/include/* $installdir/usr/include
        mv $installdir/$TORCH_PATH/share/cmake/* $installdir/%libdir%/cmake
        rm $installdir/usr/include/*.h
        rm -rf $installdir/$TORCH_PATH/{include,lib,share/cmake}
        ln -sv /usr/include $installdir/$TORCH_PATH/include
        ln -sv %libdir% $installdir/$TORCH_PATH/lib
        ln -sv lib $installdir/$TORCH_PATH/lib64
        ln -sv %libdir%/cmake $installdir/$TORCH_PATH/share/cmake
    fi
